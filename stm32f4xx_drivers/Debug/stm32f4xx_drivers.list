
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a4  080021a4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080021a4  080021a4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a4  080021a4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080021ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08002210  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002210  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031a8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000089e  00000000  00000000  0002323c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000200  00000000  00000000  00023ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  00023ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000032bc  00000000  00000000  00023e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ed0  00000000  00000000  00027144  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b235  00000000  00000000  00029014  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e4c  00000000  00000000  000342c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800203c 	.word	0x0800203c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800203c 	.word	0x0800203c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <delay>:
 * PB15 --> SPI2_MOSI
 * ALT Function Mode: 5
 */

void delay(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <delay+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	0007a11f 	.word	0x0007a11f

080002ec <SPI2_gpioInit>:

void SPI2_gpioInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI2pins;
	SPI2pins.pGPIOx = GPIOB;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <SPI2_gpioInit+0x4c>)
 80002f4:	607b      	str	r3, [r7, #4]
	SPI2pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FUN;
 80002f6:	2302      	movs	r3, #2
 80002f8:	727b      	strb	r3, [r7, #9]
	SPI2pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002fa:	2305      	movs	r3, #5
 80002fc:	737b      	strb	r3, [r7, #13]
	SPI2pins.GPIO_PinConfig.GPIO_PinOPtype = GPIO_OP_TYPE_PP;
 80002fe:	2300      	movs	r3, #0
 8000300:	733b      	strb	r3, [r7, #12]
	SPI2pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000302:	2300      	movs	r3, #0
 8000304:	72fb      	strb	r3, [r7, #11]
	SPI2pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_SPEED_FAST;
 8000306:	2302      	movs	r3, #2
 8000308:	72bb      	strb	r3, [r7, #10]

	//SPI2_CLK Pin
	SPI2pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 800030a:	230a      	movs	r3, #10
 800030c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2pins);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fbfd 	bl	8000b10 <GPIO_Init>

	//SPI2_NSS Pin
	SPI2pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000316:	2309      	movs	r3, #9
 8000318:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2pins);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fbf7 	bl	8000b10 <GPIO_Init>
	//SPI2_MISO Pin
	//SPI2pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPI2pins);

	//SPI2_MOSI Pin
	SPI2pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000322:	230f      	movs	r3, #15
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2pins);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fbf1 	bl	8000b10 <GPIO_Init>
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40020400 	.word	0x40020400

0800033c <SPI2_Init>:

void SPI2_Init(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <SPI2_Init+0x38>)
 8000344:	607b      	str	r3, [r7, #4]
	SPI2handle.GPIO_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000346:	2301      	movs	r3, #1
 8000348:	723b      	strb	r3, [r7, #8]
	SPI2handle.GPIO_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800034a:	2301      	movs	r3, #1
 800034c:	727b      	strb	r3, [r7, #9]
	SPI2handle.GPIO_PinConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // 8MHz clock speed
 800034e:	2302      	movs	r3, #2
 8000350:	72bb      	strb	r3, [r7, #10]
	SPI2handle.GPIO_PinConfig.SPI_DFF = SPI_DFF_8BITS;
 8000352:	2300      	movs	r3, #0
 8000354:	72fb      	strb	r3, [r7, #11]
	SPI2handle.GPIO_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000356:	2300      	movs	r3, #0
 8000358:	733b      	strb	r3, [r7, #12]
	SPI2handle.GPIO_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
 800035a:	2300      	movs	r3, #0
 800035c:	737b      	strb	r3, [r7, #13]
	SPI2handle.GPIO_PinConfig.SPI_SSM = SPI_SSM_DI; //Software slave management Disable
 800035e:	2300      	movs	r3, #0
 8000360:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fddd 	bl	8000f24 <SPI_Init>
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40003800 	.word	0x40003800

08000378 <GPIO_userButtonInit>:

void GPIO_userButtonInit(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioInput;
	memset(&GpioInput, 0, sizeof(GpioInput));
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	220c      	movs	r2, #12
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f000 ff09 	bl	800119c <memset>

	GpioInput.pGPIOx = GPIOC;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <GPIO_userButtonInit+0x38>)
 800038c:	607b      	str	r3, [r7, #4]
	GpioInput.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800038e:	230d      	movs	r3, #13
 8000390:	723b      	strb	r3, [r7, #8]
	GpioInput.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000392:	2300      	movs	r3, #0
 8000394:	727b      	strb	r3, [r7, #9]
	GpioInput.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_SPEED_MEDIUM;
 8000396:	2301      	movs	r3, #1
 8000398:	72bb      	strb	r3, [r7, #10]
	GpioInput.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 800039a:	2300      	movs	r3, #0
 800039c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioInput);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fbb5 	bl	8000b10 <GPIO_Init>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40020800 	.word	0x40020800

080003b4 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2bf5      	cmp	r3, #245	; 0xf5
 80003c2:	d101      	bne.n	80003c8 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	e000      	b.n	80003ca <SPI_VerifyResponse+0x16>
	}

	return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
	...

080003d8 <main>:

int main(void){
 80003d8:	b5b0      	push	{r4, r5, r7, lr}
 80003da:	b08e      	sub	sp, #56	; 0x38
 80003dc:	af00      	add	r7, sp, #0

	//char user_data[] = "Hello World";

	uint8_t dummy_write = 0xff;
 80003de:	23ff      	movs	r3, #255	; 0xff
 80003e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t dummy_read;

	//initialise_monitor_handles();

	printf("Application is running\n");
 80003e4:	48b1      	ldr	r0, [pc, #708]	; (80006ac <main+0x2d4>)
 80003e6:	f000 ff55 	bl	8001294 <puts>

	SPI2_gpioInit();
 80003ea:	f7ff ff7f 	bl	80002ec <SPI2_gpioInit>

	SPI2_Init();
 80003ee:	f7ff ffa5 	bl	800033c <SPI2_Init>

	GPIO_userButtonInit();
 80003f2:	f7ff ffc1 	bl	8000378 <GPIO_userButtonInit>

	printf("SPI Init. done\n");
 80003f6:	48ae      	ldr	r0, [pc, #696]	; (80006b0 <main+0x2d8>)
 80003f8:	f000 ff4c 	bl	8001294 <puts>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEconfig(SPI2, ENABLE);
 80003fc:	2101      	movs	r1, #1
 80003fe:	48ad      	ldr	r0, [pc, #692]	; (80006b4 <main+0x2dc>)
 8000400:	f000 fe07 	bl	8001012 <SPI_SSOEconfig>

	while(1){
		// 1. COMMAND_LED_CTRL
		//stay hang in while loop while MCU user button is not pressed
		while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 8000404:	bf00      	nop
 8000406:	210d      	movs	r1, #13
 8000408:	48ab      	ldr	r0, [pc, #684]	; (80006b8 <main+0x2e0>)
 800040a:	f000 fd1d 	bl	8000e48 <GPIO_ReadFromInputPin>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0f8      	beq.n	8000406 <main+0x2e>

		delay();
 8000414:	f7ff ff54 	bl	80002c0 <delay>

		// enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000418:	2101      	movs	r1, #1
 800041a:	48a6      	ldr	r0, [pc, #664]	; (80006b4 <main+0x2dc>)
 800041c:	f000 fddd 	bl	8000fda <SPI_PeripheralControl>

		//1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000420:	2350      	movs	r3, #80	; 0x50
 8000422:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000426:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	48a1      	ldr	r0, [pc, #644]	; (80006b4 <main+0x2dc>)
 8000430:	f000 fe1f 	bl	8001072 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000434:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000438:	2201      	movs	r2, #1
 800043a:	4619      	mov	r1, r3
 800043c:	489d      	ldr	r0, [pc, #628]	; (80006b4 <main+0x2dc>)
 800043e:	f000 fe4d 	bl	80010dc <SPI_ReceiveData>


		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000442:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	489a      	ldr	r0, [pc, #616]	; (80006b4 <main+0x2dc>)
 800044c:	f000 fe11 	bl	8001072 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000454:	2201      	movs	r2, #1
 8000456:	4619      	mov	r1, r3
 8000458:	4896      	ldr	r0, [pc, #600]	; (80006b4 <main+0x2dc>)
 800045a:	f000 fe3f 	bl	80010dc <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 800045e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ffa6 	bl	80003b4 <SPI_VerifyResponse>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d016      	beq.n	800049c <main+0xc4>
		{
			args[0] = LED_PIN;
 800046e:	2309      	movs	r3, #9
 8000470:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = LED_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			//send arguments
			SPI_SendData(SPI2,args,2);
 800047a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047e:	2202      	movs	r2, #2
 8000480:	4619      	mov	r1, r3
 8000482:	488c      	ldr	r0, [pc, #560]	; (80006b4 <main+0x2dc>)
 8000484:	f000 fdf5 	bl	8001072 <SPI_SendData>

			// dummy read
			SPI_ReceiveData(SPI2,args,2);
 8000488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048c:	2202      	movs	r2, #2
 800048e:	4619      	mov	r1, r3
 8000490:	4888      	ldr	r0, [pc, #544]	; (80006b4 <main+0x2dc>)
 8000492:	f000 fe23 	bl	80010dc <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL Executed\n");
 8000496:	4889      	ldr	r0, [pc, #548]	; (80006bc <main+0x2e4>)
 8000498:	f000 fefc 	bl	8001294 <puts>
		}
		//end of COMMAND_LED_CTRL

		// 2.COMMAND_SENSOR_READ
		//stay hang in while loop while MCU user button is not pressed
		while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 800049c:	bf00      	nop
 800049e:	210d      	movs	r1, #13
 80004a0:	4885      	ldr	r0, [pc, #532]	; (80006b8 <main+0x2e0>)
 80004a2:	f000 fcd1 	bl	8000e48 <GPIO_ReadFromInputPin>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f8      	beq.n	800049e <main+0xc6>

		delay();
 80004ac:	f7ff ff08 	bl	80002c0 <delay>

		commandcode = COMMAND_SENSOR_READ;
 80004b0:	2351      	movs	r3, #81	; 0x51
 80004b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80004b6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	487d      	ldr	r0, [pc, #500]	; (80006b4 <main+0x2dc>)
 80004c0:	f000 fdd7 	bl	8001072 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80004c4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	4879      	ldr	r0, [pc, #484]	; (80006b4 <main+0x2dc>)
 80004ce:	f000 fe05 	bl	80010dc <SPI_ReceiveData>

		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 80004d2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80004d6:	2201      	movs	r2, #1
 80004d8:	4619      	mov	r1, r3
 80004da:	4876      	ldr	r0, [pc, #472]	; (80006b4 <main+0x2dc>)
 80004dc:	f000 fdc9 	bl	8001072 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 80004e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	4872      	ldr	r0, [pc, #456]	; (80006b4 <main+0x2dc>)
 80004ea:	f000 fdf7 	bl	80010dc <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 80004ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff5e 	bl	80003b4 <SPI_VerifyResponse>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d024      	beq.n	8000548 <main+0x170>
		{
			args[0] = ANALOG_PIN0;
 80004fe:	2300      	movs	r3, #0
 8000500:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1);
 8000504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000508:	2201      	movs	r2, #1
 800050a:	4619      	mov	r1, r3
 800050c:	4869      	ldr	r0, [pc, #420]	; (80006b4 <main+0x2dc>)
 800050e:	f000 fdb0 	bl	8001072 <SPI_SendData>

			// dummy read
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000512:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000516:	2201      	movs	r2, #1
 8000518:	4619      	mov	r1, r3
 800051a:	4866      	ldr	r0, [pc, #408]	; (80006b4 <main+0x2dc>)
 800051c:	f000 fdde 	bl	80010dc <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000520:	f7ff fece 	bl	80002c0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000524:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000528:	2201      	movs	r2, #1
 800052a:	4619      	mov	r1, r3
 800052c:	4861      	ldr	r0, [pc, #388]	; (80006b4 <main+0x2dc>)
 800052e:	f000 fda0 	bl	8001072 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 8000532:	1cfb      	adds	r3, r7, #3
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	485e      	ldr	r0, [pc, #376]	; (80006b4 <main+0x2dc>)
 800053a:	f000 fdcf 	bl	80010dc <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	4619      	mov	r1, r3
 8000542:	485f      	ldr	r0, [pc, #380]	; (80006c0 <main+0x2e8>)
 8000544:	f000 fe32 	bl	80011ac <iprintf>
		}
		//end of COMMAND_SENSOR_READ

		// 3. COMMAND_LED_READ
		// wait until pill is high
		while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 8000548:	bf00      	nop
 800054a:	210d      	movs	r1, #13
 800054c:	485a      	ldr	r0, [pc, #360]	; (80006b8 <main+0x2e0>)
 800054e:	f000 fc7b 	bl	8000e48 <GPIO_ReadFromInputPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f8      	beq.n	800054a <main+0x172>

		delay(); // delay for 250ms
 8000558:	f7ff feb2 	bl	80002c0 <delay>

		commandcode = COMMAND_LED_READ;
 800055c:	2352      	movs	r3, #82	; 0x52
 800055e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000562:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	4852      	ldr	r0, [pc, #328]	; (80006b4 <main+0x2dc>)
 800056c:	f000 fd81 	bl	8001072 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000570:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	484e      	ldr	r0, [pc, #312]	; (80006b4 <main+0x2dc>)
 800057a:	f000 fdaf 	bl	80010dc <SPI_ReceiveData>

		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800057e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000582:	2201      	movs	r2, #1
 8000584:	4619      	mov	r1, r3
 8000586:	484b      	ldr	r0, [pc, #300]	; (80006b4 <main+0x2dc>)
 8000588:	f000 fd73 	bl	8001072 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 800058c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	4847      	ldr	r0, [pc, #284]	; (80006b4 <main+0x2dc>)
 8000596:	f000 fda1 	bl	80010dc <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 800059a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff08 	bl	80003b4 <SPI_VerifyResponse>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d024      	beq.n	80005f4 <main+0x21c>
		{
			uint8_t pin_status;
			args[0] = LED_PIN;
 80005aa:	2309      	movs	r3, #9
 80005ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1);
 80005b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	483e      	ldr	r0, [pc, #248]	; (80006b4 <main+0x2dc>)
 80005ba:	f000 fd5a 	bl	8001072 <SPI_SendData>

			// do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 80005be:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	483b      	ldr	r0, [pc, #236]	; (80006b4 <main+0x2dc>)
 80005c8:	f000 fd88 	bl	80010dc <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 80005cc:	f7ff fe78 	bl	80002c0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 80005d0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	4836      	ldr	r0, [pc, #216]	; (80006b4 <main+0x2dc>)
 80005da:	f000 fd4a 	bl	8001072 <SPI_SendData>

			SPI_ReceiveData(SPI2,&pin_status,1);
 80005de:	1cbb      	adds	r3, r7, #2
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	4833      	ldr	r0, [pc, #204]	; (80006b4 <main+0x2dc>)
 80005e6:	f000 fd79 	bl	80010dc <SPI_ReceiveData>
			printf("Arduino Pin ststus %d\n",pin_status);
 80005ea:	78bb      	ldrb	r3, [r7, #2]
 80005ec:	4619      	mov	r1, r3
 80005ee:	4835      	ldr	r0, [pc, #212]	; (80006c4 <main+0x2ec>)
 80005f0:	f000 fddc 	bl	80011ac <iprintf>
		}
		//end of COMMAND_LED_READ

		//4. COMMAND_PRINT
		// wait until pill is high
		while(!GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 80005f4:	bf00      	nop
 80005f6:	210d      	movs	r1, #13
 80005f8:	482f      	ldr	r0, [pc, #188]	; (80006b8 <main+0x2e0>)
 80005fa:	f000 fc25 	bl	8000e48 <GPIO_ReadFromInputPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f8      	beq.n	80005f6 <main+0x21e>

		delay(); // delay for 250ms
 8000604:	f7ff fe5c 	bl	80002c0 <delay>

		commandcode = COMMAND_PRINT;
 8000608:	2353      	movs	r3, #83	; 0x53
 800060a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800060e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	4827      	ldr	r0, [pc, #156]	; (80006b4 <main+0x2dc>)
 8000618:	f000 fd2b 	bl	8001072 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 800061c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <main+0x2dc>)
 8000626:	f000 fd59 	bl	80010dc <SPI_ReceiveData>

		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800062a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <main+0x2dc>)
 8000634:	f000 fd1d 	bl	8001072 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <main+0x2dc>)
 8000642:	f000 fd4b 	bl	80010dc <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <main+0x2f0>)
 8000648:	f107 0410 	add.w	r4, r7, #16
 800064c:	461d      	mov	r5, r3
 800064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000652:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000656:	6020      	str	r0, [r4, #0]
 8000658:	3404      	adds	r4, #4
 800065a:	8021      	strh	r1, [r4, #0]
 800065c:	3402      	adds	r4, #2
 800065e:	0c0b      	lsrs	r3, r1, #16
 8000660:	7023      	strb	r3, [r4, #0]

		if( SPI_VerifyResponse(ackbyte))
 8000662:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fea4 	bl	80003b4 <SPI_VerifyResponse>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d048      	beq.n	8000704 <main+0x32c>
		{
			args[0] = strlen((char*)message);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fdca 	bl	8000210 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1);
 8000684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <main+0x2dc>)
 800068e:	f000 fcf0 	bl	8001072 <SPI_SendData>

			// do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000692:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <main+0x2dc>)
 800069c:	f000 fd1e 	bl	80010dc <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 80006a0:	f7ff fe0e 	bl	80002c0 <delay>

			for(int i=0; i<args[0]; i++){
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
 80006a8:	e023      	b.n	80006f2 <main+0x31a>
 80006aa:	bf00      	nop
 80006ac:	08002054 	.word	0x08002054
 80006b0:	0800206c 	.word	0x0800206c
 80006b4:	40003800 	.word	0x40003800
 80006b8:	40020800 	.word	0x40020800
 80006bc:	0800207c 	.word	0x0800207c
 80006c0:	08002098 	.word	0x08002098
 80006c4:	080020b0 	.word	0x080020b0
 80006c8:	080020f4 	.word	0x080020f4
				//send arguments
				SPI_SendData(SPI2,&message[i],1);
 80006cc:	f107 0210 	add.w	r2, r7, #16
 80006d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d2:	4413      	add	r3, r2
 80006d4:	2201      	movs	r2, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	483a      	ldr	r0, [pc, #232]	; (80007c4 <main+0x3ec>)
 80006da:	f000 fcca 	bl	8001072 <SPI_SendData>

				// do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80006de:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	4837      	ldr	r0, [pc, #220]	; (80007c4 <main+0x3ec>)
 80006e8:	f000 fcf8 	bl	80010dc <SPI_ReceiveData>
			for(int i=0; i<args[0]; i++){
 80006ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ee:	3301      	adds	r3, #1
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
 80006f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006f6:	461a      	mov	r2, r3
 80006f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fa:	4293      	cmp	r3, r2
 80006fc:	dbe6      	blt.n	80006cc <main+0x2f4>
			}
			printf("COMMAND_PRINT Executed \n");
 80006fe:	4832      	ldr	r0, [pc, #200]	; (80007c8 <main+0x3f0>)
 8000700:	f000 fdc8 	bl	8001294 <puts>
		}
		//end of COMMAND_PRINT

		//5. CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000704:	bf00      	nop
 8000706:	2100      	movs	r1, #0
 8000708:	4830      	ldr	r0, [pc, #192]	; (80007cc <main+0x3f4>)
 800070a:	f000 fb9d 	bl	8000e48 <GPIO_ReadFromInputPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f8      	beq.n	8000706 <main+0x32e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000714:	f7ff fdd4 	bl	80002c0 <delay>

		commandcode = COMMAND_ID_READ;
 8000718:	2354      	movs	r3, #84	; 0x54
 800071a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800071e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <main+0x3ec>)
 8000728:	f000 fca3 	bl	8001072 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 800072c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	4823      	ldr	r0, [pc, #140]	; (80007c4 <main+0x3ec>)
 8000736:	f000 fcd1 	bl	80010dc <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800073a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	4820      	ldr	r0, [pc, #128]	; (80007c4 <main+0x3ec>)
 8000744:	f000 fc95 	bl	8001072 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	481c      	ldr	r0, [pc, #112]	; (80007c4 <main+0x3ec>)
 8000752:	f000 fcc3 	bl	80010dc <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 8000756:	2300      	movs	r3, #0
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
		if( SPI_VerifyResponse(ackbyte))
 800075a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fe28 	bl	80003b4 <SPI_VerifyResponse>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d01e      	beq.n	80007a8 <main+0x3d0>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
 800076e:	e011      	b.n	8000794 <main+0x3bc>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000770:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	4812      	ldr	r0, [pc, #72]	; (80007c4 <main+0x3ec>)
 800077a:	f000 fc7a 	bl	8001072 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000782:	4413      	add	r3, r2
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	480e      	ldr	r0, [pc, #56]	; (80007c4 <main+0x3ec>)
 800078a:	f000 fca7 	bl	80010dc <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 800078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000790:	3301      	adds	r3, #1
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
 8000794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000796:	2b09      	cmp	r3, #9
 8000798:	d9ea      	bls.n	8000770 <main+0x398>
			}

			id[10] = '\0';
 800079a:	2300      	movs	r3, #0
 800079c:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x3f8>)
 80007a4:	f000 fd02 	bl	80011ac <iprintf>

		}

		// Lets confirm SPI2 is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 80007a8:	bf00      	nop
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <main+0x3ec>)
 80007ae:	f000 fc4c 	bl	800104a <SPI_GetFlagStatus>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f8      	bne.n	80007aa <main+0x3d2>

		// disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 80007b8:	2100      	movs	r1, #0
 80007ba:	4802      	ldr	r0, [pc, #8]	; (80007c4 <main+0x3ec>)
 80007bc:	f000 fc0d 	bl	8000fda <SPI_PeripheralControl>
	while(1){
 80007c0:	e620      	b.n	8000404 <main+0x2c>
 80007c2:	bf00      	nop
 80007c4:	40003800 	.word	0x40003800
 80007c8:	080020c8 	.word	0x080020c8
 80007cc:	40020000 	.word	0x40020000
 80007d0:	080020e0 	.word	0x080020e0

080007d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e00a      	b.n	80007fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007e6:	f3af 8000 	nop.w
 80007ea:	4601      	mov	r1, r0
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	b2ca      	uxtb	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf0      	blt.n	80007e6 <_read+0x12>
	}

return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e009      	b.n	8000834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf1      	blt.n	8000820 <_write+0x12>
	}
	return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_close>:

int _close(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	return -1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086e:	605a      	str	r2, [r3, #4]
	return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <_isatty>:

int _isatty(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	return 1;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	return 0;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <_sbrk+0x5c>)
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <_sbrk+0x60>)
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <_sbrk+0x64>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <_sbrk+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d207      	bcs.n	80008f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e0:	f000 fc32 	bl	8001148 <__errno>
 80008e4:	4602      	mov	r2, r0
 80008e6:	230c      	movs	r3, #12
 80008e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	e009      	b.n	8000904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <_sbrk+0x64>)
 8000900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20020000 	.word	0x20020000
 8000910:	00000400 	.word	0x00000400
 8000914:	20000080 	.word	0x20000080
 8000918:	20000090 	.word	0x20000090

0800091c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000920:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopForever+0xe>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094a:	f000 fc03 	bl	8001154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fd43 	bl	80003d8 <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   r0, =_estack
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000960:	080021ac 	.word	0x080021ac
  ldr r2, =_sbss
 8000964:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000968:	20000090 	.word	0x20000090

0800096c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 ***********************************************************************/

void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx, uint8_t ENorDI){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE){
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d157      	bne.n	8000a32 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a59      	ldr	r2, [pc, #356]	; (8000aec <GPIO_PeriClockControl+0x17c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d106      	bne.n	8000998 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800098a:	4b59      	ldr	r3, [pc, #356]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a58      	ldr	r2, [pc, #352]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000996:	e0a3      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOB){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a56      	ldr	r2, [pc, #344]	; (8000af4 <GPIO_PeriClockControl+0x184>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d106      	bne.n	80009ae <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009a0:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a52      	ldr	r2, [pc, #328]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ac:	e098      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOC){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a51      	ldr	r2, [pc, #324]	; (8000af8 <GPIO_PeriClockControl+0x188>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009b6:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a4d      	ldr	r2, [pc, #308]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c2:	e08d      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOD){
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a4d      	ldr	r2, [pc, #308]	; (8000afc <GPIO_PeriClockControl+0x18c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d106      	bne.n	80009da <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80009cc:	4b48      	ldr	r3, [pc, #288]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a47      	ldr	r2, [pc, #284]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d8:	e082      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOE){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a48      	ldr	r2, [pc, #288]	; (8000b00 <GPIO_PeriClockControl+0x190>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d106      	bne.n	80009f0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80009e2:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a42      	ldr	r2, [pc, #264]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ee:	e077      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOF){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a44      	ldr	r2, [pc, #272]	; (8000b04 <GPIO_PeriClockControl+0x194>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d106      	bne.n	8000a06 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80009f8:	4b3d      	ldr	r3, [pc, #244]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	4a3c      	ldr	r2, [pc, #240]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 80009fe:	f043 0320 	orr.w	r3, r3, #32
 8000a02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a04:	e06c      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOG){
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a3f      	ldr	r2, [pc, #252]	; (8000b08 <GPIO_PeriClockControl+0x198>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a0e:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a37      	ldr	r2, [pc, #220]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a1a:	e061      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOH){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <GPIO_PeriClockControl+0x19c>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d15d      	bne.n	8000ae0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a30:	e056      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a2d      	ldr	r2, [pc, #180]	; (8000aec <GPIO_PeriClockControl+0x17c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a2c      	ldr	r2, [pc, #176]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a46:	e04b      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOB){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <GPIO_PeriClockControl+0x184>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d106      	bne.n	8000a5e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000a50:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a56:	f023 0302 	bic.w	r3, r3, #2
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a5c:	e040      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOC){
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <GPIO_PeriClockControl+0x188>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a6c:	f023 0304 	bic.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a72:	e035      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOD){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <GPIO_PeriClockControl+0x18c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d106      	bne.n	8000a8a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a82:	f023 0308 	bic.w	r3, r3, #8
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a88:	e02a      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOE){
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <GPIO_PeriClockControl+0x190>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d106      	bne.n	8000aa0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000a98:	f023 0310 	bic.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a9e:	e01f      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOF){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <GPIO_PeriClockControl+0x194>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d106      	bne.n	8000ab6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000aae:	f023 0320 	bic.w	r3, r3, #32
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ab4:	e014      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOG){
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <GPIO_PeriClockControl+0x198>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d106      	bne.n	8000acc <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aca:	e009      	b.n	8000ae0 <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOH){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <GPIO_PeriClockControl+0x19c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d105      	bne.n	8000ae0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <GPIO_PeriClockControl+0x180>)
 8000ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021400 	.word	0x40021400
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	40021c00 	.word	0x40021c00

08000b10 <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 ***********************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	// Enable GPIO clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff26 	bl	8000970 <GPIO_PeriClockControl>

	// configure mode of gpio
	uint32_t temp = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	795b      	ldrb	r3, [r3, #5]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d820      	bhi.n	8000b72 <GPIO_Init+0x62>
		// non-interrupt mode
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	795b      	ldrb	r3, [r3, #5]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	791b      	ldrb	r3, [r3, #4]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2103      	movs	r1, #3
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e0c2      	b.n	8000cf8 <GPIO_Init+0x1e8>
	} else{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	795b      	ldrb	r3, [r3, #5]
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d117      	bne.n	8000baa <GPIO_Init+0x9a>
			// 1.Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b7a:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <GPIO_Init+0x188>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	7912      	ldrb	r2, [r2, #4]
 8000b82:	4611      	mov	r1, r2
 8000b84:	2201      	movs	r2, #1
 8000b86:	408a      	lsls	r2, r1
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <GPIO_Init+0x188>)
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <GPIO_Init+0x188>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7912      	ldrb	r2, [r2, #4]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	408a      	lsls	r2, r1
 8000b9e:	43d2      	mvns	r2, r2
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <GPIO_Init+0x188>)
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	6093      	str	r3, [r2, #8]
 8000ba8:	e035      	b.n	8000c16 <GPIO_Init+0x106>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	795b      	ldrb	r3, [r3, #5]
 8000bae:	2b05      	cmp	r3, #5
 8000bb0:	d117      	bne.n	8000be2 <GPIO_Init+0xd2>
			// 1.Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <GPIO_Init+0x188>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	7912      	ldrb	r2, [r2, #4]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	408a      	lsls	r2, r1
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4a35      	ldr	r2, [pc, #212]	; (8000c98 <GPIO_Init+0x188>)
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bc8:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <GPIO_Init+0x188>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	7912      	ldrb	r2, [r2, #4]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	408a      	lsls	r2, r1
 8000bd6:	43d2      	mvns	r2, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <GPIO_Init+0x188>)
 8000bdc:	400b      	ands	r3, r1
 8000bde:	60d3      	str	r3, [r2, #12]
 8000be0:	e019      	b.n	8000c16 <GPIO_Init+0x106>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	795b      	ldrb	r3, [r3, #5]
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d115      	bne.n	8000c16 <GPIO_Init+0x106>
			// 1.Configure FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <GPIO_Init+0x188>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	7912      	ldrb	r2, [r2, #4]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	408a      	lsls	r2, r1
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <GPIO_Init+0x188>)
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <GPIO_Init+0x188>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	7912      	ldrb	r2, [r2, #4]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	408a      	lsls	r2, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <GPIO_Init+0x188>)
 8000c12:	430b      	orrs	r3, r1
 8000c14:	6093      	str	r3, [r2, #8]
		}

		// 2.Configure the gpio port section in SYSCFG_EXTICR
		uint8_t temp3, temp4;
		temp3 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	74fb      	strb	r3, [r7, #19]
		temp4 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	74bb      	strb	r3, [r7, #18]
		SYSCFG_PCLK_EN();
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <GPIO_Init+0x18c>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <GPIO_Init+0x18c>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c32:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t extiPortNum = GPIO_BASE_ADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <GPIO_Init+0x190>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d03e      	beq.n	8000cbc <GPIO_Init+0x1ac>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <GPIO_Init+0x194>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d024      	beq.n	8000c92 <GPIO_Init+0x182>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <GPIO_Init+0x198>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d01d      	beq.n	8000c8e <GPIO_Init+0x17e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <GPIO_Init+0x19c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d016      	beq.n	8000c8a <GPIO_Init+0x17a>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <GPIO_Init+0x1a0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00f      	beq.n	8000c86 <GPIO_Init+0x176>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <GPIO_Init+0x1a4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d008      	beq.n	8000c82 <GPIO_Init+0x172>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <GPIO_Init+0x1a8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <GPIO_Init+0x16e>
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	e01f      	b.n	8000cbe <GPIO_Init+0x1ae>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e01d      	b.n	8000cbe <GPIO_Init+0x1ae>
 8000c82:	2305      	movs	r3, #5
 8000c84:	e01b      	b.n	8000cbe <GPIO_Init+0x1ae>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e019      	b.n	8000cbe <GPIO_Init+0x1ae>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e017      	b.n	8000cbe <GPIO_Init+0x1ae>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e015      	b.n	8000cbe <GPIO_Init+0x1ae>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e013      	b.n	8000cbe <GPIO_Init+0x1ae>
 8000c96:	bf00      	nop
 8000c98:	40013c00 	.word	0x40013c00
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40021400 	.word	0x40021400
 8000cb8:	40021800 	.word	0x40021800
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp3] |= (extiPortNum << (temp4*4));
 8000cc0:	4a5f      	ldr	r2, [pc, #380]	; (8000e40 <GPIO_Init+0x330>)
 8000cc2:	7cfb      	ldrb	r3, [r7, #19]
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cca:	7c79      	ldrb	r1, [r7, #17]
 8000ccc:	7cbb      	ldrb	r3, [r7, #18]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	495a      	ldr	r1, [pc, #360]	; (8000e40 <GPIO_Init+0x330>)
 8000cd8:	7cfb      	ldrb	r3, [r7, #19]
 8000cda:	4302      	orrs	r2, r0
 8000cdc:	3302      	adds	r3, #2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ce2:	4b58      	ldr	r3, [pc, #352]	; (8000e44 <GPIO_Init+0x334>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	7912      	ldrb	r2, [r2, #4]
 8000cea:	4611      	mov	r1, r2
 8000cec:	2201      	movs	r2, #1
 8000cee:	408a      	lsls	r2, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4a54      	ldr	r2, [pc, #336]	; (8000e44 <GPIO_Init+0x334>)
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6013      	str	r3, [r2, #0]
	}

	// configure the speed
	temp = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	799b      	ldrb	r3, [r3, #6]
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	791b      	ldrb	r3, [r3, #4]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	791b      	ldrb	r3, [r3, #4]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	400a      	ands	r2, r1
 8000d2a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6899      	ldr	r1, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	609a      	str	r2, [r3, #8]

	// configure the pupd settings
	temp = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	79db      	ldrb	r3, [r3, #7]
 8000d44:	461a      	mov	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	791b      	ldrb	r3, [r3, #4]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2103      	movs	r1, #3
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68d9      	ldr	r1, [r3, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	60da      	str	r2, [r3, #12]

	// configure the output type
	temp = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPtype << (1*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7a1b      	ldrb	r3, [r3, #8]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	791b      	ldrb	r3, [r3, #4]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2301      	movs	r3, #1
 8000da2:	408b      	lsls	r3, r1
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	400a      	ands	r2, r1
 8000dae:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6859      	ldr	r1, [r3, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	605a      	str	r2, [r3, #4]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FUN){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d136      	bne.n	8000e36 <GPIO_Init+0x326>
		// configure alt function mode
		uint32_t temp1 = 0, temp2 = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	210f      	movs	r1, #15
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4011      	ands	r1, r2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2)); //alt function low
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7a5b      	ldrb	r3, [r3, #9]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4311      	orrs	r1, r2
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	3208      	adds	r2, #8
 8000e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40013800 	.word	0x40013800
 8000e44:	40013c00 	.word	0x40013c00

08000e48 <GPIO_ReadFromInputPin>:
 * @return            - 0 or 1
 *
 * @Note              -
 ***********************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_Regdef_t *pGPIOx, uint8_t PinNumber){
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
	return value;
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SPI_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 ***********************************************************************/

void SPI_PeriClockControl(SPI_Regdef_t *pSPIx, uint8_t ENorDI){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE){
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d120      	bne.n	8000ec8 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <SPI_PeriClockControl+0xa0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d106      	bne.n	8000e9c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
			SPI2_PCLK_DI();
		} else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 8000e9a:	e035      	b.n	8000f08 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI2){
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <SPI_PeriClockControl+0xa8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d106      	bne.n	8000eb2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eb0:	e02a      	b.n	8000f08 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI3){
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <SPI_PeriClockControl+0xac>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d126      	bne.n	8000f08 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec6:	e01f      	b.n	8000f08 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <SPI_PeriClockControl+0xa0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d106      	bne.n	8000ede <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eda:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000edc:	e014      	b.n	8000f08 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI2){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <SPI_PeriClockControl+0xa8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d106      	bne.n	8000ef4 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ef2:	e009      	b.n	8000f08 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI3){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <SPI_PeriClockControl+0xac>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d105      	bne.n	8000f08 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SPI_PeriClockControl+0xa4>)
 8000f02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40003800 	.word	0x40003800
 8000f20:	40003c00 	.word	0x40003c00

08000f24 <SPI_Init>:
 * @return            -  none
 *
 * @Note              -  none
 ***********************************************************************/

void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff9e 	bl	8000e74 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register
	uint32_t tempReg = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]

	//1. Configure SPI device mode
	tempReg |= (pSPIHandle->GPIO_PinConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]

	//2. Configure SPI Bus Configuration
	if(pSPIHandle->GPIO_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	795b      	ldrb	r3, [r3, #5]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d104      	bne.n	8000f5c <SPI_Init+0x38>
		//bidi mode should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	e014      	b.n	8000f86 <SPI_Init+0x62>
	} else if(pSPIHandle->GPIO_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d104      	bne.n	8000f6e <SPI_Init+0x4a>
		//bidi mode should be set
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e00b      	b.n	8000f86 <SPI_Init+0x62>
	} else if(pSPIHandle->GPIO_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	795b      	ldrb	r3, [r3, #5]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d107      	bne.n	8000f86 <SPI_Init+0x62>
		//BIDI mode should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f7c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempReg |= (1 << SPI_CR1_RXONLY);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f84:	60fb      	str	r3, [r7, #12]
	}

	//Configure SPI Clock Speed
	tempReg |= (pSPIHandle->GPIO_PinConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	799b      	ldrb	r3, [r3, #6]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]

	//Configure SPI Data Frame Format
	tempReg |= (pSPIHandle->GPIO_PinConfig.SPI_DFF << SPI_CR1_DFF);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	79db      	ldrb	r3, [r3, #7]
 8000f98:	02db      	lsls	r3, r3, #11
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]

	//Configure SPI Clock Polarity
	tempReg |= (pSPIHandle->GPIO_PinConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7a1b      	ldrb	r3, [r3, #8]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

	//Configure SPI Clock Phase
	tempReg |= (pSPIHandle->GPIO_PinConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7a5b      	ldrb	r3, [r3, #9]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

	//Configure SPI Software Slave Management
	tempReg |= (pSPIHandle->GPIO_PinConfig.SPI_SSM << SPI_CR1_SSM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7a9b      	ldrb	r3, [r3, #10]
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	601a      	str	r2, [r3, #0]

}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <SPI_PeripheralControl>:
 * @return            -  none
 *
 * @Note              -  This is blocking call
 ***********************************************************************/

void SPI_PeripheralControl(SPI_Regdef_t *pSPIx, uint8_t ENorDI){
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE){
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ff8:	e005      	b.n	8001006 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <SPI_SSOEconfig>:
 *
 * @return            -  none
 *
 * @Note              -  This is blocking call
 ***********************************************************************/
void SPI_SSOEconfig(SPI_Regdef_t *pSPIx, uint8_t ENorDI){
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE){
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d106      	bne.n	8001032 <SPI_SSOEconfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f043 0204 	orr.w	r2, r3, #4
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	605a      	str	r2, [r3, #4]
	} else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8001030:	e005      	b.n	800103e <SPI_SSOEconfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f023 0204 	bic.w	r2, r3, #4
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <SPI_GetFlagStatus>:
 * @return            -  none
 *
 * @Note              -
 ***********************************************************************/
uint8_t SPI_GetFlagStatus(SPI_Regdef_t *pSPIx , uint32_t FlagName)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <SPI_SendData>:
 * @return            -  none
 *
 * @Note              -  This is blocking call
 ***********************************************************************/

void SPI_SendData(SPI_Regdef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
	if(len > 0){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d027      	beq.n	80010d4 <SPI_SendData+0x62>
		// 1.check TXE status
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8001084:	bf00      	nop
 8001086:	2102      	movs	r1, #2
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff ffde 	bl	800104a <SPI_GetFlagStatus>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f8      	beq.n	8001086 <SPI_SendData+0x14>

		// 2.check DFF register
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00e      	beq.n	80010be <SPI_SendData+0x4c>
			// 16-bit DFF
			pSPIx->DR = *((uint16_t *)pTxBuffer);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	60da      	str	r2, [r3, #12]
			len--;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
			len--;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxBuffer++;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
			pSPIx->DR = *pTxBuffer;
			len--;
			pTxBuffer++;
		}
	}
}
 80010bc:	e00a      	b.n	80010d4 <SPI_SendData+0x62>
			pSPIx->DR = *pTxBuffer;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	60da      	str	r2, [r3, #12]
			len--;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <SPI_ReceiveData>:
 *
 * @return            -  none
 *
 * @Note              -  This is blocking call
 ***********************************************************************/
void SPI_ReceiveData(SPI_Regdef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	if(len > 0){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d027      	beq.n	800113e <SPI_ReceiveData+0x62>
		// 1.check RXNE status
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 80010ee:	bf00      	nop
 80010f0:	2101      	movs	r1, #1
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f7ff ffa9 	bl	800104a <SPI_GetFlagStatus>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f8      	beq.n	80010f0 <SPI_ReceiveData+0x14>

		// 2.check DFF register
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00e      	beq.n	8001128 <SPI_ReceiveData+0x4c>
			// 16-bit DFF
			*((uint16_t *)pRxBuffer) = pSPIx->DR;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	b29a      	uxth	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	801a      	strh	r2, [r3, #0]
			len--;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
			len--;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3b01      	subs	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
			(uint16_t *)pRxBuffer++;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	3301      	adds	r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
			*pRxBuffer = pSPIx->DR;
			len--;
			pRxBuffer++;
		}
	}
}
 8001126:	e00a      	b.n	800113e <SPI_ReceiveData+0x62>
			*pRxBuffer = pSPIx->DR;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	701a      	strb	r2, [r3, #0]
			len--;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3b01      	subs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3301      	adds	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <__errno>:
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <__errno+0x8>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <__libc_init_array>:
 8001154:	b570      	push	{r4, r5, r6, lr}
 8001156:	4e0d      	ldr	r6, [pc, #52]	; (800118c <__libc_init_array+0x38>)
 8001158:	4c0d      	ldr	r4, [pc, #52]	; (8001190 <__libc_init_array+0x3c>)
 800115a:	1ba4      	subs	r4, r4, r6
 800115c:	10a4      	asrs	r4, r4, #2
 800115e:	2500      	movs	r5, #0
 8001160:	42a5      	cmp	r5, r4
 8001162:	d109      	bne.n	8001178 <__libc_init_array+0x24>
 8001164:	4e0b      	ldr	r6, [pc, #44]	; (8001194 <__libc_init_array+0x40>)
 8001166:	4c0c      	ldr	r4, [pc, #48]	; (8001198 <__libc_init_array+0x44>)
 8001168:	f000 ff68 	bl	800203c <_init>
 800116c:	1ba4      	subs	r4, r4, r6
 800116e:	10a4      	asrs	r4, r4, #2
 8001170:	2500      	movs	r5, #0
 8001172:	42a5      	cmp	r5, r4
 8001174:	d105      	bne.n	8001182 <__libc_init_array+0x2e>
 8001176:	bd70      	pop	{r4, r5, r6, pc}
 8001178:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800117c:	4798      	blx	r3
 800117e:	3501      	adds	r5, #1
 8001180:	e7ee      	b.n	8001160 <__libc_init_array+0xc>
 8001182:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001186:	4798      	blx	r3
 8001188:	3501      	adds	r5, #1
 800118a:	e7f2      	b.n	8001172 <__libc_init_array+0x1e>
 800118c:	080021a4 	.word	0x080021a4
 8001190:	080021a4 	.word	0x080021a4
 8001194:	080021a4 	.word	0x080021a4
 8001198:	080021a8 	.word	0x080021a8

0800119c <memset>:
 800119c:	4402      	add	r2, r0
 800119e:	4603      	mov	r3, r0
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d100      	bne.n	80011a6 <memset+0xa>
 80011a4:	4770      	bx	lr
 80011a6:	f803 1b01 	strb.w	r1, [r3], #1
 80011aa:	e7f9      	b.n	80011a0 <memset+0x4>

080011ac <iprintf>:
 80011ac:	b40f      	push	{r0, r1, r2, r3}
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <iprintf+0x2c>)
 80011b0:	b513      	push	{r0, r1, r4, lr}
 80011b2:	681c      	ldr	r4, [r3, #0]
 80011b4:	b124      	cbz	r4, 80011c0 <iprintf+0x14>
 80011b6:	69a3      	ldr	r3, [r4, #24]
 80011b8:	b913      	cbnz	r3, 80011c0 <iprintf+0x14>
 80011ba:	4620      	mov	r0, r4
 80011bc:	f000 fa22 	bl	8001604 <__sinit>
 80011c0:	ab05      	add	r3, sp, #20
 80011c2:	9a04      	ldr	r2, [sp, #16]
 80011c4:	68a1      	ldr	r1, [r4, #8]
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	4620      	mov	r0, r4
 80011ca:	f000 fbdb 	bl	8001984 <_vfiprintf_r>
 80011ce:	b002      	add	sp, #8
 80011d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011d4:	b004      	add	sp, #16
 80011d6:	4770      	bx	lr
 80011d8:	20000000 	.word	0x20000000

080011dc <_puts_r>:
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	460e      	mov	r6, r1
 80011e0:	4605      	mov	r5, r0
 80011e2:	b118      	cbz	r0, 80011ec <_puts_r+0x10>
 80011e4:	6983      	ldr	r3, [r0, #24]
 80011e6:	b90b      	cbnz	r3, 80011ec <_puts_r+0x10>
 80011e8:	f000 fa0c 	bl	8001604 <__sinit>
 80011ec:	69ab      	ldr	r3, [r5, #24]
 80011ee:	68ac      	ldr	r4, [r5, #8]
 80011f0:	b913      	cbnz	r3, 80011f8 <_puts_r+0x1c>
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 fa06 	bl	8001604 <__sinit>
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <_puts_r+0xac>)
 80011fa:	429c      	cmp	r4, r3
 80011fc:	d117      	bne.n	800122e <_puts_r+0x52>
 80011fe:	686c      	ldr	r4, [r5, #4]
 8001200:	89a3      	ldrh	r3, [r4, #12]
 8001202:	071b      	lsls	r3, r3, #28
 8001204:	d51d      	bpl.n	8001242 <_puts_r+0x66>
 8001206:	6923      	ldr	r3, [r4, #16]
 8001208:	b1db      	cbz	r3, 8001242 <_puts_r+0x66>
 800120a:	3e01      	subs	r6, #1
 800120c:	68a3      	ldr	r3, [r4, #8]
 800120e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001212:	3b01      	subs	r3, #1
 8001214:	60a3      	str	r3, [r4, #8]
 8001216:	b9e9      	cbnz	r1, 8001254 <_puts_r+0x78>
 8001218:	2b00      	cmp	r3, #0
 800121a:	da2e      	bge.n	800127a <_puts_r+0x9e>
 800121c:	4622      	mov	r2, r4
 800121e:	210a      	movs	r1, #10
 8001220:	4628      	mov	r0, r5
 8001222:	f000 f83f 	bl	80012a4 <__swbuf_r>
 8001226:	3001      	adds	r0, #1
 8001228:	d011      	beq.n	800124e <_puts_r+0x72>
 800122a:	200a      	movs	r0, #10
 800122c:	e011      	b.n	8001252 <_puts_r+0x76>
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <_puts_r+0xb0>)
 8001230:	429c      	cmp	r4, r3
 8001232:	d101      	bne.n	8001238 <_puts_r+0x5c>
 8001234:	68ac      	ldr	r4, [r5, #8]
 8001236:	e7e3      	b.n	8001200 <_puts_r+0x24>
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <_puts_r+0xb4>)
 800123a:	429c      	cmp	r4, r3
 800123c:	bf08      	it	eq
 800123e:	68ec      	ldreq	r4, [r5, #12]
 8001240:	e7de      	b.n	8001200 <_puts_r+0x24>
 8001242:	4621      	mov	r1, r4
 8001244:	4628      	mov	r0, r5
 8001246:	f000 f87f 	bl	8001348 <__swsetup_r>
 800124a:	2800      	cmp	r0, #0
 800124c:	d0dd      	beq.n	800120a <_puts_r+0x2e>
 800124e:	f04f 30ff 	mov.w	r0, #4294967295
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	2b00      	cmp	r3, #0
 8001256:	da04      	bge.n	8001262 <_puts_r+0x86>
 8001258:	69a2      	ldr	r2, [r4, #24]
 800125a:	429a      	cmp	r2, r3
 800125c:	dc06      	bgt.n	800126c <_puts_r+0x90>
 800125e:	290a      	cmp	r1, #10
 8001260:	d004      	beq.n	800126c <_puts_r+0x90>
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	6022      	str	r2, [r4, #0]
 8001268:	7019      	strb	r1, [r3, #0]
 800126a:	e7cf      	b.n	800120c <_puts_r+0x30>
 800126c:	4622      	mov	r2, r4
 800126e:	4628      	mov	r0, r5
 8001270:	f000 f818 	bl	80012a4 <__swbuf_r>
 8001274:	3001      	adds	r0, #1
 8001276:	d1c9      	bne.n	800120c <_puts_r+0x30>
 8001278:	e7e9      	b.n	800124e <_puts_r+0x72>
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	200a      	movs	r0, #10
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	6022      	str	r2, [r4, #0]
 8001282:	7018      	strb	r0, [r3, #0]
 8001284:	e7e5      	b.n	8001252 <_puts_r+0x76>
 8001286:	bf00      	nop
 8001288:	08002130 	.word	0x08002130
 800128c:	08002150 	.word	0x08002150
 8001290:	08002110 	.word	0x08002110

08001294 <puts>:
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <puts+0xc>)
 8001296:	4601      	mov	r1, r0
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	f7ff bf9f 	b.w	80011dc <_puts_r>
 800129e:	bf00      	nop
 80012a0:	20000000 	.word	0x20000000

080012a4 <__swbuf_r>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	460e      	mov	r6, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	4605      	mov	r5, r0
 80012ac:	b118      	cbz	r0, 80012b6 <__swbuf_r+0x12>
 80012ae:	6983      	ldr	r3, [r0, #24]
 80012b0:	b90b      	cbnz	r3, 80012b6 <__swbuf_r+0x12>
 80012b2:	f000 f9a7 	bl	8001604 <__sinit>
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <__swbuf_r+0x98>)
 80012b8:	429c      	cmp	r4, r3
 80012ba:	d12a      	bne.n	8001312 <__swbuf_r+0x6e>
 80012bc:	686c      	ldr	r4, [r5, #4]
 80012be:	69a3      	ldr	r3, [r4, #24]
 80012c0:	60a3      	str	r3, [r4, #8]
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	071a      	lsls	r2, r3, #28
 80012c6:	d52e      	bpl.n	8001326 <__swbuf_r+0x82>
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	b363      	cbz	r3, 8001326 <__swbuf_r+0x82>
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	6820      	ldr	r0, [r4, #0]
 80012d0:	1ac0      	subs	r0, r0, r3
 80012d2:	6963      	ldr	r3, [r4, #20]
 80012d4:	b2f6      	uxtb	r6, r6
 80012d6:	4283      	cmp	r3, r0
 80012d8:	4637      	mov	r7, r6
 80012da:	dc04      	bgt.n	80012e6 <__swbuf_r+0x42>
 80012dc:	4621      	mov	r1, r4
 80012de:	4628      	mov	r0, r5
 80012e0:	f000 f926 	bl	8001530 <_fflush_r>
 80012e4:	bb28      	cbnz	r0, 8001332 <__swbuf_r+0x8e>
 80012e6:	68a3      	ldr	r3, [r4, #8]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60a3      	str	r3, [r4, #8]
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	6022      	str	r2, [r4, #0]
 80012f2:	701e      	strb	r6, [r3, #0]
 80012f4:	6963      	ldr	r3, [r4, #20]
 80012f6:	3001      	adds	r0, #1
 80012f8:	4283      	cmp	r3, r0
 80012fa:	d004      	beq.n	8001306 <__swbuf_r+0x62>
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	07db      	lsls	r3, r3, #31
 8001300:	d519      	bpl.n	8001336 <__swbuf_r+0x92>
 8001302:	2e0a      	cmp	r6, #10
 8001304:	d117      	bne.n	8001336 <__swbuf_r+0x92>
 8001306:	4621      	mov	r1, r4
 8001308:	4628      	mov	r0, r5
 800130a:	f000 f911 	bl	8001530 <_fflush_r>
 800130e:	b190      	cbz	r0, 8001336 <__swbuf_r+0x92>
 8001310:	e00f      	b.n	8001332 <__swbuf_r+0x8e>
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <__swbuf_r+0x9c>)
 8001314:	429c      	cmp	r4, r3
 8001316:	d101      	bne.n	800131c <__swbuf_r+0x78>
 8001318:	68ac      	ldr	r4, [r5, #8]
 800131a:	e7d0      	b.n	80012be <__swbuf_r+0x1a>
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <__swbuf_r+0xa0>)
 800131e:	429c      	cmp	r4, r3
 8001320:	bf08      	it	eq
 8001322:	68ec      	ldreq	r4, [r5, #12]
 8001324:	e7cb      	b.n	80012be <__swbuf_r+0x1a>
 8001326:	4621      	mov	r1, r4
 8001328:	4628      	mov	r0, r5
 800132a:	f000 f80d 	bl	8001348 <__swsetup_r>
 800132e:	2800      	cmp	r0, #0
 8001330:	d0cc      	beq.n	80012cc <__swbuf_r+0x28>
 8001332:	f04f 37ff 	mov.w	r7, #4294967295
 8001336:	4638      	mov	r0, r7
 8001338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800133a:	bf00      	nop
 800133c:	08002130 	.word	0x08002130
 8001340:	08002150 	.word	0x08002150
 8001344:	08002110 	.word	0x08002110

08001348 <__swsetup_r>:
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <__swsetup_r+0xcc>)
 800134a:	b570      	push	{r4, r5, r6, lr}
 800134c:	681d      	ldr	r5, [r3, #0]
 800134e:	4606      	mov	r6, r0
 8001350:	460c      	mov	r4, r1
 8001352:	b125      	cbz	r5, 800135e <__swsetup_r+0x16>
 8001354:	69ab      	ldr	r3, [r5, #24]
 8001356:	b913      	cbnz	r3, 800135e <__swsetup_r+0x16>
 8001358:	4628      	mov	r0, r5
 800135a:	f000 f953 	bl	8001604 <__sinit>
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <__swsetup_r+0xd0>)
 8001360:	429c      	cmp	r4, r3
 8001362:	d10f      	bne.n	8001384 <__swsetup_r+0x3c>
 8001364:	686c      	ldr	r4, [r5, #4]
 8001366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136a:	b29a      	uxth	r2, r3
 800136c:	0715      	lsls	r5, r2, #28
 800136e:	d42c      	bmi.n	80013ca <__swsetup_r+0x82>
 8001370:	06d0      	lsls	r0, r2, #27
 8001372:	d411      	bmi.n	8001398 <__swsetup_r+0x50>
 8001374:	2209      	movs	r2, #9
 8001376:	6032      	str	r2, [r6, #0]
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	f04f 30ff 	mov.w	r0, #4294967295
 8001382:	e03e      	b.n	8001402 <__swsetup_r+0xba>
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <__swsetup_r+0xd4>)
 8001386:	429c      	cmp	r4, r3
 8001388:	d101      	bne.n	800138e <__swsetup_r+0x46>
 800138a:	68ac      	ldr	r4, [r5, #8]
 800138c:	e7eb      	b.n	8001366 <__swsetup_r+0x1e>
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <__swsetup_r+0xd8>)
 8001390:	429c      	cmp	r4, r3
 8001392:	bf08      	it	eq
 8001394:	68ec      	ldreq	r4, [r5, #12]
 8001396:	e7e6      	b.n	8001366 <__swsetup_r+0x1e>
 8001398:	0751      	lsls	r1, r2, #29
 800139a:	d512      	bpl.n	80013c2 <__swsetup_r+0x7a>
 800139c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800139e:	b141      	cbz	r1, 80013b2 <__swsetup_r+0x6a>
 80013a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013a4:	4299      	cmp	r1, r3
 80013a6:	d002      	beq.n	80013ae <__swsetup_r+0x66>
 80013a8:	4630      	mov	r0, r6
 80013aa:	f000 fa19 	bl	80017e0 <_free_r>
 80013ae:	2300      	movs	r3, #0
 80013b0:	6363      	str	r3, [r4, #52]	; 0x34
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013b8:	81a3      	strh	r3, [r4, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	6063      	str	r3, [r4, #4]
 80013be:	6923      	ldr	r3, [r4, #16]
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	89a3      	ldrh	r3, [r4, #12]
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	81a3      	strh	r3, [r4, #12]
 80013ca:	6923      	ldr	r3, [r4, #16]
 80013cc:	b94b      	cbnz	r3, 80013e2 <__swsetup_r+0x9a>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d8:	d003      	beq.n	80013e2 <__swsetup_r+0x9a>
 80013da:	4621      	mov	r1, r4
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 f9bf 	bl	8001760 <__smakebuf_r>
 80013e2:	89a2      	ldrh	r2, [r4, #12]
 80013e4:	f012 0301 	ands.w	r3, r2, #1
 80013e8:	d00c      	beq.n	8001404 <__swsetup_r+0xbc>
 80013ea:	2300      	movs	r3, #0
 80013ec:	60a3      	str	r3, [r4, #8]
 80013ee:	6963      	ldr	r3, [r4, #20]
 80013f0:	425b      	negs	r3, r3
 80013f2:	61a3      	str	r3, [r4, #24]
 80013f4:	6923      	ldr	r3, [r4, #16]
 80013f6:	b953      	cbnz	r3, 800140e <__swsetup_r+0xc6>
 80013f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001400:	d1ba      	bne.n	8001378 <__swsetup_r+0x30>
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	0792      	lsls	r2, r2, #30
 8001406:	bf58      	it	pl
 8001408:	6963      	ldrpl	r3, [r4, #20]
 800140a:	60a3      	str	r3, [r4, #8]
 800140c:	e7f2      	b.n	80013f4 <__swsetup_r+0xac>
 800140e:	2000      	movs	r0, #0
 8001410:	e7f7      	b.n	8001402 <__swsetup_r+0xba>
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000
 8001418:	08002130 	.word	0x08002130
 800141c:	08002150 	.word	0x08002150
 8001420:	08002110 	.word	0x08002110

08001424 <__sflush_r>:
 8001424:	898a      	ldrh	r2, [r1, #12]
 8001426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142a:	4605      	mov	r5, r0
 800142c:	0710      	lsls	r0, r2, #28
 800142e:	460c      	mov	r4, r1
 8001430:	d458      	bmi.n	80014e4 <__sflush_r+0xc0>
 8001432:	684b      	ldr	r3, [r1, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dc05      	bgt.n	8001444 <__sflush_r+0x20>
 8001438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	dc02      	bgt.n	8001444 <__sflush_r+0x20>
 800143e:	2000      	movs	r0, #0
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001446:	2e00      	cmp	r6, #0
 8001448:	d0f9      	beq.n	800143e <__sflush_r+0x1a>
 800144a:	2300      	movs	r3, #0
 800144c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001450:	682f      	ldr	r7, [r5, #0]
 8001452:	6a21      	ldr	r1, [r4, #32]
 8001454:	602b      	str	r3, [r5, #0]
 8001456:	d032      	beq.n	80014be <__sflush_r+0x9a>
 8001458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	075a      	lsls	r2, r3, #29
 800145e:	d505      	bpl.n	800146c <__sflush_r+0x48>
 8001460:	6863      	ldr	r3, [r4, #4]
 8001462:	1ac0      	subs	r0, r0, r3
 8001464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001466:	b10b      	cbz	r3, 800146c <__sflush_r+0x48>
 8001468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800146a:	1ac0      	subs	r0, r0, r3
 800146c:	2300      	movs	r3, #0
 800146e:	4602      	mov	r2, r0
 8001470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001472:	6a21      	ldr	r1, [r4, #32]
 8001474:	4628      	mov	r0, r5
 8001476:	47b0      	blx	r6
 8001478:	1c43      	adds	r3, r0, #1
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	d106      	bne.n	800148c <__sflush_r+0x68>
 800147e:	6829      	ldr	r1, [r5, #0]
 8001480:	291d      	cmp	r1, #29
 8001482:	d848      	bhi.n	8001516 <__sflush_r+0xf2>
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <__sflush_r+0x108>)
 8001486:	40ca      	lsrs	r2, r1
 8001488:	07d6      	lsls	r6, r2, #31
 800148a:	d544      	bpl.n	8001516 <__sflush_r+0xf2>
 800148c:	2200      	movs	r2, #0
 800148e:	6062      	str	r2, [r4, #4]
 8001490:	04d9      	lsls	r1, r3, #19
 8001492:	6922      	ldr	r2, [r4, #16]
 8001494:	6022      	str	r2, [r4, #0]
 8001496:	d504      	bpl.n	80014a2 <__sflush_r+0x7e>
 8001498:	1c42      	adds	r2, r0, #1
 800149a:	d101      	bne.n	80014a0 <__sflush_r+0x7c>
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	b903      	cbnz	r3, 80014a2 <__sflush_r+0x7e>
 80014a0:	6560      	str	r0, [r4, #84]	; 0x54
 80014a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014a4:	602f      	str	r7, [r5, #0]
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d0c9      	beq.n	800143e <__sflush_r+0x1a>
 80014aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ae:	4299      	cmp	r1, r3
 80014b0:	d002      	beq.n	80014b8 <__sflush_r+0x94>
 80014b2:	4628      	mov	r0, r5
 80014b4:	f000 f994 	bl	80017e0 <_free_r>
 80014b8:	2000      	movs	r0, #0
 80014ba:	6360      	str	r0, [r4, #52]	; 0x34
 80014bc:	e7c0      	b.n	8001440 <__sflush_r+0x1c>
 80014be:	2301      	movs	r3, #1
 80014c0:	4628      	mov	r0, r5
 80014c2:	47b0      	blx	r6
 80014c4:	1c41      	adds	r1, r0, #1
 80014c6:	d1c8      	bne.n	800145a <__sflush_r+0x36>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0c5      	beq.n	800145a <__sflush_r+0x36>
 80014ce:	2b1d      	cmp	r3, #29
 80014d0:	d001      	beq.n	80014d6 <__sflush_r+0xb2>
 80014d2:	2b16      	cmp	r3, #22
 80014d4:	d101      	bne.n	80014da <__sflush_r+0xb6>
 80014d6:	602f      	str	r7, [r5, #0]
 80014d8:	e7b1      	b.n	800143e <__sflush_r+0x1a>
 80014da:	89a3      	ldrh	r3, [r4, #12]
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	81a3      	strh	r3, [r4, #12]
 80014e2:	e7ad      	b.n	8001440 <__sflush_r+0x1c>
 80014e4:	690f      	ldr	r7, [r1, #16]
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	d0a9      	beq.n	800143e <__sflush_r+0x1a>
 80014ea:	0793      	lsls	r3, r2, #30
 80014ec:	680e      	ldr	r6, [r1, #0]
 80014ee:	bf08      	it	eq
 80014f0:	694b      	ldreq	r3, [r1, #20]
 80014f2:	600f      	str	r7, [r1, #0]
 80014f4:	bf18      	it	ne
 80014f6:	2300      	movne	r3, #0
 80014f8:	eba6 0807 	sub.w	r8, r6, r7
 80014fc:	608b      	str	r3, [r1, #8]
 80014fe:	f1b8 0f00 	cmp.w	r8, #0
 8001502:	dd9c      	ble.n	800143e <__sflush_r+0x1a>
 8001504:	4643      	mov	r3, r8
 8001506:	463a      	mov	r2, r7
 8001508:	6a21      	ldr	r1, [r4, #32]
 800150a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800150c:	4628      	mov	r0, r5
 800150e:	47b0      	blx	r6
 8001510:	2800      	cmp	r0, #0
 8001512:	dc06      	bgt.n	8001522 <__sflush_r+0xfe>
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151a:	81a3      	strh	r3, [r4, #12]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	e78e      	b.n	8001440 <__sflush_r+0x1c>
 8001522:	4407      	add	r7, r0
 8001524:	eba8 0800 	sub.w	r8, r8, r0
 8001528:	e7e9      	b.n	80014fe <__sflush_r+0xda>
 800152a:	bf00      	nop
 800152c:	20400001 	.word	0x20400001

08001530 <_fflush_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	690b      	ldr	r3, [r1, #16]
 8001534:	4605      	mov	r5, r0
 8001536:	460c      	mov	r4, r1
 8001538:	b1db      	cbz	r3, 8001572 <_fflush_r+0x42>
 800153a:	b118      	cbz	r0, 8001544 <_fflush_r+0x14>
 800153c:	6983      	ldr	r3, [r0, #24]
 800153e:	b90b      	cbnz	r3, 8001544 <_fflush_r+0x14>
 8001540:	f000 f860 	bl	8001604 <__sinit>
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <_fflush_r+0x48>)
 8001546:	429c      	cmp	r4, r3
 8001548:	d109      	bne.n	800155e <_fflush_r+0x2e>
 800154a:	686c      	ldr	r4, [r5, #4]
 800154c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001550:	b17b      	cbz	r3, 8001572 <_fflush_r+0x42>
 8001552:	4621      	mov	r1, r4
 8001554:	4628      	mov	r0, r5
 8001556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800155a:	f7ff bf63 	b.w	8001424 <__sflush_r>
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_fflush_r+0x4c>)
 8001560:	429c      	cmp	r4, r3
 8001562:	d101      	bne.n	8001568 <_fflush_r+0x38>
 8001564:	68ac      	ldr	r4, [r5, #8]
 8001566:	e7f1      	b.n	800154c <_fflush_r+0x1c>
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <_fflush_r+0x50>)
 800156a:	429c      	cmp	r4, r3
 800156c:	bf08      	it	eq
 800156e:	68ec      	ldreq	r4, [r5, #12]
 8001570:	e7ec      	b.n	800154c <_fflush_r+0x1c>
 8001572:	2000      	movs	r0, #0
 8001574:	bd38      	pop	{r3, r4, r5, pc}
 8001576:	bf00      	nop
 8001578:	08002130 	.word	0x08002130
 800157c:	08002150 	.word	0x08002150
 8001580:	08002110 	.word	0x08002110

08001584 <std>:
 8001584:	2300      	movs	r3, #0
 8001586:	b510      	push	{r4, lr}
 8001588:	4604      	mov	r4, r0
 800158a:	e9c0 3300 	strd	r3, r3, [r0]
 800158e:	6083      	str	r3, [r0, #8]
 8001590:	8181      	strh	r1, [r0, #12]
 8001592:	6643      	str	r3, [r0, #100]	; 0x64
 8001594:	81c2      	strh	r2, [r0, #14]
 8001596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800159a:	6183      	str	r3, [r0, #24]
 800159c:	4619      	mov	r1, r3
 800159e:	2208      	movs	r2, #8
 80015a0:	305c      	adds	r0, #92	; 0x5c
 80015a2:	f7ff fdfb 	bl	800119c <memset>
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <std+0x38>)
 80015a8:	6263      	str	r3, [r4, #36]	; 0x24
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <std+0x3c>)
 80015ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <std+0x40>)
 80015b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <std+0x44>)
 80015b4:	6224      	str	r4, [r4, #32]
 80015b6:	6323      	str	r3, [r4, #48]	; 0x30
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	08001ee1 	.word	0x08001ee1
 80015c0:	08001f03 	.word	0x08001f03
 80015c4:	08001f3b 	.word	0x08001f3b
 80015c8:	08001f5f 	.word	0x08001f5f

080015cc <_cleanup_r>:
 80015cc:	4901      	ldr	r1, [pc, #4]	; (80015d4 <_cleanup_r+0x8>)
 80015ce:	f000 b885 	b.w	80016dc <_fwalk_reent>
 80015d2:	bf00      	nop
 80015d4:	08001531 	.word	0x08001531

080015d8 <__sfmoreglue>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	1e4a      	subs	r2, r1, #1
 80015dc:	2568      	movs	r5, #104	; 0x68
 80015de:	4355      	muls	r5, r2
 80015e0:	460e      	mov	r6, r1
 80015e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015e6:	f000 f949 	bl	800187c <_malloc_r>
 80015ea:	4604      	mov	r4, r0
 80015ec:	b140      	cbz	r0, 8001600 <__sfmoreglue+0x28>
 80015ee:	2100      	movs	r1, #0
 80015f0:	e9c0 1600 	strd	r1, r6, [r0]
 80015f4:	300c      	adds	r0, #12
 80015f6:	60a0      	str	r0, [r4, #8]
 80015f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015fc:	f7ff fdce 	bl	800119c <memset>
 8001600:	4620      	mov	r0, r4
 8001602:	bd70      	pop	{r4, r5, r6, pc}

08001604 <__sinit>:
 8001604:	6983      	ldr	r3, [r0, #24]
 8001606:	b510      	push	{r4, lr}
 8001608:	4604      	mov	r4, r0
 800160a:	bb33      	cbnz	r3, 800165a <__sinit+0x56>
 800160c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001610:	6503      	str	r3, [r0, #80]	; 0x50
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <__sinit+0x58>)
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <__sinit+0x5c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6282      	str	r2, [r0, #40]	; 0x28
 800161a:	4298      	cmp	r0, r3
 800161c:	bf04      	itt	eq
 800161e:	2301      	moveq	r3, #1
 8001620:	6183      	streq	r3, [r0, #24]
 8001622:	f000 f81f 	bl	8001664 <__sfp>
 8001626:	6060      	str	r0, [r4, #4]
 8001628:	4620      	mov	r0, r4
 800162a:	f000 f81b 	bl	8001664 <__sfp>
 800162e:	60a0      	str	r0, [r4, #8]
 8001630:	4620      	mov	r0, r4
 8001632:	f000 f817 	bl	8001664 <__sfp>
 8001636:	2200      	movs	r2, #0
 8001638:	60e0      	str	r0, [r4, #12]
 800163a:	2104      	movs	r1, #4
 800163c:	6860      	ldr	r0, [r4, #4]
 800163e:	f7ff ffa1 	bl	8001584 <std>
 8001642:	2201      	movs	r2, #1
 8001644:	2109      	movs	r1, #9
 8001646:	68a0      	ldr	r0, [r4, #8]
 8001648:	f7ff ff9c 	bl	8001584 <std>
 800164c:	2202      	movs	r2, #2
 800164e:	2112      	movs	r1, #18
 8001650:	68e0      	ldr	r0, [r4, #12]
 8001652:	f7ff ff97 	bl	8001584 <std>
 8001656:	2301      	movs	r3, #1
 8001658:	61a3      	str	r3, [r4, #24]
 800165a:	bd10      	pop	{r4, pc}
 800165c:	0800210c 	.word	0x0800210c
 8001660:	080015cd 	.word	0x080015cd

08001664 <__sfp>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <__sfp+0x70>)
 8001668:	681e      	ldr	r6, [r3, #0]
 800166a:	69b3      	ldr	r3, [r6, #24]
 800166c:	4607      	mov	r7, r0
 800166e:	b913      	cbnz	r3, 8001676 <__sfp+0x12>
 8001670:	4630      	mov	r0, r6
 8001672:	f7ff ffc7 	bl	8001604 <__sinit>
 8001676:	3648      	adds	r6, #72	; 0x48
 8001678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800167c:	3b01      	subs	r3, #1
 800167e:	d503      	bpl.n	8001688 <__sfp+0x24>
 8001680:	6833      	ldr	r3, [r6, #0]
 8001682:	b133      	cbz	r3, 8001692 <__sfp+0x2e>
 8001684:	6836      	ldr	r6, [r6, #0]
 8001686:	e7f7      	b.n	8001678 <__sfp+0x14>
 8001688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800168c:	b16d      	cbz	r5, 80016aa <__sfp+0x46>
 800168e:	3468      	adds	r4, #104	; 0x68
 8001690:	e7f4      	b.n	800167c <__sfp+0x18>
 8001692:	2104      	movs	r1, #4
 8001694:	4638      	mov	r0, r7
 8001696:	f7ff ff9f 	bl	80015d8 <__sfmoreglue>
 800169a:	6030      	str	r0, [r6, #0]
 800169c:	2800      	cmp	r0, #0
 800169e:	d1f1      	bne.n	8001684 <__sfp+0x20>
 80016a0:	230c      	movs	r3, #12
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	4604      	mov	r4, r0
 80016a6:	4620      	mov	r0, r4
 80016a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <__sfp+0x74>)
 80016ac:	6665      	str	r5, [r4, #100]	; 0x64
 80016ae:	e9c4 5500 	strd	r5, r5, [r4]
 80016b2:	60a5      	str	r5, [r4, #8]
 80016b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80016b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80016bc:	2208      	movs	r2, #8
 80016be:	4629      	mov	r1, r5
 80016c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80016c4:	f7ff fd6a 	bl	800119c <memset>
 80016c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80016cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80016d0:	e7e9      	b.n	80016a6 <__sfp+0x42>
 80016d2:	bf00      	nop
 80016d4:	0800210c 	.word	0x0800210c
 80016d8:	ffff0001 	.word	0xffff0001

080016dc <_fwalk_reent>:
 80016dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e0:	4680      	mov	r8, r0
 80016e2:	4689      	mov	r9, r1
 80016e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016e8:	2600      	movs	r6, #0
 80016ea:	b914      	cbnz	r4, 80016f2 <_fwalk_reent+0x16>
 80016ec:	4630      	mov	r0, r6
 80016ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80016f6:	3f01      	subs	r7, #1
 80016f8:	d501      	bpl.n	80016fe <_fwalk_reent+0x22>
 80016fa:	6824      	ldr	r4, [r4, #0]
 80016fc:	e7f5      	b.n	80016ea <_fwalk_reent+0xe>
 80016fe:	89ab      	ldrh	r3, [r5, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d907      	bls.n	8001714 <_fwalk_reent+0x38>
 8001704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001708:	3301      	adds	r3, #1
 800170a:	d003      	beq.n	8001714 <_fwalk_reent+0x38>
 800170c:	4629      	mov	r1, r5
 800170e:	4640      	mov	r0, r8
 8001710:	47c8      	blx	r9
 8001712:	4306      	orrs	r6, r0
 8001714:	3568      	adds	r5, #104	; 0x68
 8001716:	e7ee      	b.n	80016f6 <_fwalk_reent+0x1a>

08001718 <__swhatbuf_r>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	460e      	mov	r6, r1
 800171c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001720:	2900      	cmp	r1, #0
 8001722:	b096      	sub	sp, #88	; 0x58
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	da07      	bge.n	800173a <__swhatbuf_r+0x22>
 800172a:	2300      	movs	r3, #0
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	89b3      	ldrh	r3, [r6, #12]
 8001730:	061a      	lsls	r2, r3, #24
 8001732:	d410      	bmi.n	8001756 <__swhatbuf_r+0x3e>
 8001734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001738:	e00e      	b.n	8001758 <__swhatbuf_r+0x40>
 800173a:	466a      	mov	r2, sp
 800173c:	f000 fc36 	bl	8001fac <_fstat_r>
 8001740:	2800      	cmp	r0, #0
 8001742:	dbf2      	blt.n	800172a <__swhatbuf_r+0x12>
 8001744:	9a01      	ldr	r2, [sp, #4]
 8001746:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800174a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800174e:	425a      	negs	r2, r3
 8001750:	415a      	adcs	r2, r3
 8001752:	602a      	str	r2, [r5, #0]
 8001754:	e7ee      	b.n	8001734 <__swhatbuf_r+0x1c>
 8001756:	2340      	movs	r3, #64	; 0x40
 8001758:	2000      	movs	r0, #0
 800175a:	6023      	str	r3, [r4, #0]
 800175c:	b016      	add	sp, #88	; 0x58
 800175e:	bd70      	pop	{r4, r5, r6, pc}

08001760 <__smakebuf_r>:
 8001760:	898b      	ldrh	r3, [r1, #12]
 8001762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001764:	079d      	lsls	r5, r3, #30
 8001766:	4606      	mov	r6, r0
 8001768:	460c      	mov	r4, r1
 800176a:	d507      	bpl.n	800177c <__smakebuf_r+0x1c>
 800176c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001770:	6023      	str	r3, [r4, #0]
 8001772:	6123      	str	r3, [r4, #16]
 8001774:	2301      	movs	r3, #1
 8001776:	6163      	str	r3, [r4, #20]
 8001778:	b002      	add	sp, #8
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	ab01      	add	r3, sp, #4
 800177e:	466a      	mov	r2, sp
 8001780:	f7ff ffca 	bl	8001718 <__swhatbuf_r>
 8001784:	9900      	ldr	r1, [sp, #0]
 8001786:	4605      	mov	r5, r0
 8001788:	4630      	mov	r0, r6
 800178a:	f000 f877 	bl	800187c <_malloc_r>
 800178e:	b948      	cbnz	r0, 80017a4 <__smakebuf_r+0x44>
 8001790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001794:	059a      	lsls	r2, r3, #22
 8001796:	d4ef      	bmi.n	8001778 <__smakebuf_r+0x18>
 8001798:	f023 0303 	bic.w	r3, r3, #3
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	81a3      	strh	r3, [r4, #12]
 80017a2:	e7e3      	b.n	800176c <__smakebuf_r+0xc>
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <__smakebuf_r+0x7c>)
 80017a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80017a8:	89a3      	ldrh	r3, [r4, #12]
 80017aa:	6020      	str	r0, [r4, #0]
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	81a3      	strh	r3, [r4, #12]
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	6163      	str	r3, [r4, #20]
 80017b6:	9b01      	ldr	r3, [sp, #4]
 80017b8:	6120      	str	r0, [r4, #16]
 80017ba:	b15b      	cbz	r3, 80017d4 <__smakebuf_r+0x74>
 80017bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017c0:	4630      	mov	r0, r6
 80017c2:	f000 fc05 	bl	8001fd0 <_isatty_r>
 80017c6:	b128      	cbz	r0, 80017d4 <__smakebuf_r+0x74>
 80017c8:	89a3      	ldrh	r3, [r4, #12]
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	81a3      	strh	r3, [r4, #12]
 80017d4:	89a3      	ldrh	r3, [r4, #12]
 80017d6:	431d      	orrs	r5, r3
 80017d8:	81a5      	strh	r5, [r4, #12]
 80017da:	e7cd      	b.n	8001778 <__smakebuf_r+0x18>
 80017dc:	080015cd 	.word	0x080015cd

080017e0 <_free_r>:
 80017e0:	b538      	push	{r3, r4, r5, lr}
 80017e2:	4605      	mov	r5, r0
 80017e4:	2900      	cmp	r1, #0
 80017e6:	d045      	beq.n	8001874 <_free_r+0x94>
 80017e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017ec:	1f0c      	subs	r4, r1, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bfb8      	it	lt
 80017f2:	18e4      	addlt	r4, r4, r3
 80017f4:	f000 fc0e 	bl	8002014 <__malloc_lock>
 80017f8:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <_free_r+0x98>)
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	4610      	mov	r0, r2
 80017fe:	b933      	cbnz	r3, 800180e <_free_r+0x2e>
 8001800:	6063      	str	r3, [r4, #4]
 8001802:	6014      	str	r4, [r2, #0]
 8001804:	4628      	mov	r0, r5
 8001806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800180a:	f000 bc04 	b.w	8002016 <__malloc_unlock>
 800180e:	42a3      	cmp	r3, r4
 8001810:	d90c      	bls.n	800182c <_free_r+0x4c>
 8001812:	6821      	ldr	r1, [r4, #0]
 8001814:	1862      	adds	r2, r4, r1
 8001816:	4293      	cmp	r3, r2
 8001818:	bf04      	itt	eq
 800181a:	681a      	ldreq	r2, [r3, #0]
 800181c:	685b      	ldreq	r3, [r3, #4]
 800181e:	6063      	str	r3, [r4, #4]
 8001820:	bf04      	itt	eq
 8001822:	1852      	addeq	r2, r2, r1
 8001824:	6022      	streq	r2, [r4, #0]
 8001826:	6004      	str	r4, [r0, #0]
 8001828:	e7ec      	b.n	8001804 <_free_r+0x24>
 800182a:	4613      	mov	r3, r2
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	b10a      	cbz	r2, 8001834 <_free_r+0x54>
 8001830:	42a2      	cmp	r2, r4
 8001832:	d9fa      	bls.n	800182a <_free_r+0x4a>
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	1858      	adds	r0, r3, r1
 8001838:	42a0      	cmp	r0, r4
 800183a:	d10b      	bne.n	8001854 <_free_r+0x74>
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	4401      	add	r1, r0
 8001840:	1858      	adds	r0, r3, r1
 8001842:	4282      	cmp	r2, r0
 8001844:	6019      	str	r1, [r3, #0]
 8001846:	d1dd      	bne.n	8001804 <_free_r+0x24>
 8001848:	6810      	ldr	r0, [r2, #0]
 800184a:	6852      	ldr	r2, [r2, #4]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	4401      	add	r1, r0
 8001850:	6019      	str	r1, [r3, #0]
 8001852:	e7d7      	b.n	8001804 <_free_r+0x24>
 8001854:	d902      	bls.n	800185c <_free_r+0x7c>
 8001856:	230c      	movs	r3, #12
 8001858:	602b      	str	r3, [r5, #0]
 800185a:	e7d3      	b.n	8001804 <_free_r+0x24>
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	1821      	adds	r1, r4, r0
 8001860:	428a      	cmp	r2, r1
 8001862:	bf04      	itt	eq
 8001864:	6811      	ldreq	r1, [r2, #0]
 8001866:	6852      	ldreq	r2, [r2, #4]
 8001868:	6062      	str	r2, [r4, #4]
 800186a:	bf04      	itt	eq
 800186c:	1809      	addeq	r1, r1, r0
 800186e:	6021      	streq	r1, [r4, #0]
 8001870:	605c      	str	r4, [r3, #4]
 8001872:	e7c7      	b.n	8001804 <_free_r+0x24>
 8001874:	bd38      	pop	{r3, r4, r5, pc}
 8001876:	bf00      	nop
 8001878:	20000084 	.word	0x20000084

0800187c <_malloc_r>:
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	1ccd      	adds	r5, r1, #3
 8001880:	f025 0503 	bic.w	r5, r5, #3
 8001884:	3508      	adds	r5, #8
 8001886:	2d0c      	cmp	r5, #12
 8001888:	bf38      	it	cc
 800188a:	250c      	movcc	r5, #12
 800188c:	2d00      	cmp	r5, #0
 800188e:	4606      	mov	r6, r0
 8001890:	db01      	blt.n	8001896 <_malloc_r+0x1a>
 8001892:	42a9      	cmp	r1, r5
 8001894:	d903      	bls.n	800189e <_malloc_r+0x22>
 8001896:	230c      	movs	r3, #12
 8001898:	6033      	str	r3, [r6, #0]
 800189a:	2000      	movs	r0, #0
 800189c:	bd70      	pop	{r4, r5, r6, pc}
 800189e:	f000 fbb9 	bl	8002014 <__malloc_lock>
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <_malloc_r+0xac>)
 80018a4:	6814      	ldr	r4, [r2, #0]
 80018a6:	4621      	mov	r1, r4
 80018a8:	b991      	cbnz	r1, 80018d0 <_malloc_r+0x54>
 80018aa:	4c20      	ldr	r4, [pc, #128]	; (800192c <_malloc_r+0xb0>)
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	b91b      	cbnz	r3, 80018b8 <_malloc_r+0x3c>
 80018b0:	4630      	mov	r0, r6
 80018b2:	f000 fb05 	bl	8001ec0 <_sbrk_r>
 80018b6:	6020      	str	r0, [r4, #0]
 80018b8:	4629      	mov	r1, r5
 80018ba:	4630      	mov	r0, r6
 80018bc:	f000 fb00 	bl	8001ec0 <_sbrk_r>
 80018c0:	1c43      	adds	r3, r0, #1
 80018c2:	d124      	bne.n	800190e <_malloc_r+0x92>
 80018c4:	230c      	movs	r3, #12
 80018c6:	6033      	str	r3, [r6, #0]
 80018c8:	4630      	mov	r0, r6
 80018ca:	f000 fba4 	bl	8002016 <__malloc_unlock>
 80018ce:	e7e4      	b.n	800189a <_malloc_r+0x1e>
 80018d0:	680b      	ldr	r3, [r1, #0]
 80018d2:	1b5b      	subs	r3, r3, r5
 80018d4:	d418      	bmi.n	8001908 <_malloc_r+0x8c>
 80018d6:	2b0b      	cmp	r3, #11
 80018d8:	d90f      	bls.n	80018fa <_malloc_r+0x7e>
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	50cd      	str	r5, [r1, r3]
 80018de:	18cc      	adds	r4, r1, r3
 80018e0:	4630      	mov	r0, r6
 80018e2:	f000 fb98 	bl	8002016 <__malloc_unlock>
 80018e6:	f104 000b 	add.w	r0, r4, #11
 80018ea:	1d23      	adds	r3, r4, #4
 80018ec:	f020 0007 	bic.w	r0, r0, #7
 80018f0:	1ac3      	subs	r3, r0, r3
 80018f2:	d0d3      	beq.n	800189c <_malloc_r+0x20>
 80018f4:	425a      	negs	r2, r3
 80018f6:	50e2      	str	r2, [r4, r3]
 80018f8:	e7d0      	b.n	800189c <_malloc_r+0x20>
 80018fa:	428c      	cmp	r4, r1
 80018fc:	684b      	ldr	r3, [r1, #4]
 80018fe:	bf16      	itet	ne
 8001900:	6063      	strne	r3, [r4, #4]
 8001902:	6013      	streq	r3, [r2, #0]
 8001904:	460c      	movne	r4, r1
 8001906:	e7eb      	b.n	80018e0 <_malloc_r+0x64>
 8001908:	460c      	mov	r4, r1
 800190a:	6849      	ldr	r1, [r1, #4]
 800190c:	e7cc      	b.n	80018a8 <_malloc_r+0x2c>
 800190e:	1cc4      	adds	r4, r0, #3
 8001910:	f024 0403 	bic.w	r4, r4, #3
 8001914:	42a0      	cmp	r0, r4
 8001916:	d005      	beq.n	8001924 <_malloc_r+0xa8>
 8001918:	1a21      	subs	r1, r4, r0
 800191a:	4630      	mov	r0, r6
 800191c:	f000 fad0 	bl	8001ec0 <_sbrk_r>
 8001920:	3001      	adds	r0, #1
 8001922:	d0cf      	beq.n	80018c4 <_malloc_r+0x48>
 8001924:	6025      	str	r5, [r4, #0]
 8001926:	e7db      	b.n	80018e0 <_malloc_r+0x64>
 8001928:	20000084 	.word	0x20000084
 800192c:	20000088 	.word	0x20000088

08001930 <__sfputc_r>:
 8001930:	6893      	ldr	r3, [r2, #8]
 8001932:	3b01      	subs	r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	b410      	push	{r4}
 8001938:	6093      	str	r3, [r2, #8]
 800193a:	da08      	bge.n	800194e <__sfputc_r+0x1e>
 800193c:	6994      	ldr	r4, [r2, #24]
 800193e:	42a3      	cmp	r3, r4
 8001940:	db01      	blt.n	8001946 <__sfputc_r+0x16>
 8001942:	290a      	cmp	r1, #10
 8001944:	d103      	bne.n	800194e <__sfputc_r+0x1e>
 8001946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800194a:	f7ff bcab 	b.w	80012a4 <__swbuf_r>
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	1c58      	adds	r0, r3, #1
 8001952:	6010      	str	r0, [r2, #0]
 8001954:	7019      	strb	r1, [r3, #0]
 8001956:	4608      	mov	r0, r1
 8001958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800195c:	4770      	bx	lr

0800195e <__sfputs_r>:
 800195e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001960:	4606      	mov	r6, r0
 8001962:	460f      	mov	r7, r1
 8001964:	4614      	mov	r4, r2
 8001966:	18d5      	adds	r5, r2, r3
 8001968:	42ac      	cmp	r4, r5
 800196a:	d101      	bne.n	8001970 <__sfputs_r+0x12>
 800196c:	2000      	movs	r0, #0
 800196e:	e007      	b.n	8001980 <__sfputs_r+0x22>
 8001970:	463a      	mov	r2, r7
 8001972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001976:	4630      	mov	r0, r6
 8001978:	f7ff ffda 	bl	8001930 <__sfputc_r>
 800197c:	1c43      	adds	r3, r0, #1
 800197e:	d1f3      	bne.n	8001968 <__sfputs_r+0xa>
 8001980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001984 <_vfiprintf_r>:
 8001984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001988:	460c      	mov	r4, r1
 800198a:	b09d      	sub	sp, #116	; 0x74
 800198c:	4617      	mov	r7, r2
 800198e:	461d      	mov	r5, r3
 8001990:	4606      	mov	r6, r0
 8001992:	b118      	cbz	r0, 800199c <_vfiprintf_r+0x18>
 8001994:	6983      	ldr	r3, [r0, #24]
 8001996:	b90b      	cbnz	r3, 800199c <_vfiprintf_r+0x18>
 8001998:	f7ff fe34 	bl	8001604 <__sinit>
 800199c:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <_vfiprintf_r+0x20c>)
 800199e:	429c      	cmp	r4, r3
 80019a0:	d158      	bne.n	8001a54 <_vfiprintf_r+0xd0>
 80019a2:	6874      	ldr	r4, [r6, #4]
 80019a4:	89a3      	ldrh	r3, [r4, #12]
 80019a6:	0718      	lsls	r0, r3, #28
 80019a8:	d55e      	bpl.n	8001a68 <_vfiprintf_r+0xe4>
 80019aa:	6923      	ldr	r3, [r4, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05b      	beq.n	8001a68 <_vfiprintf_r+0xe4>
 80019b0:	2300      	movs	r3, #0
 80019b2:	9309      	str	r3, [sp, #36]	; 0x24
 80019b4:	2320      	movs	r3, #32
 80019b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019ba:	2330      	movs	r3, #48	; 0x30
 80019bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	f04f 0b01 	mov.w	fp, #1
 80019c6:	46b8      	mov	r8, r7
 80019c8:	4645      	mov	r5, r8
 80019ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80019ce:	b10b      	cbz	r3, 80019d4 <_vfiprintf_r+0x50>
 80019d0:	2b25      	cmp	r3, #37	; 0x25
 80019d2:	d154      	bne.n	8001a7e <_vfiprintf_r+0xfa>
 80019d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80019d8:	d00b      	beq.n	80019f2 <_vfiprintf_r+0x6e>
 80019da:	4653      	mov	r3, sl
 80019dc:	463a      	mov	r2, r7
 80019de:	4621      	mov	r1, r4
 80019e0:	4630      	mov	r0, r6
 80019e2:	f7ff ffbc 	bl	800195e <__sfputs_r>
 80019e6:	3001      	adds	r0, #1
 80019e8:	f000 80c2 	beq.w	8001b70 <_vfiprintf_r+0x1ec>
 80019ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ee:	4453      	add	r3, sl
 80019f0:	9309      	str	r3, [sp, #36]	; 0x24
 80019f2:	f898 3000 	ldrb.w	r3, [r8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80ba 	beq.w	8001b70 <_vfiprintf_r+0x1ec>
 80019fc:	2300      	movs	r3, #0
 80019fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a06:	9304      	str	r3, [sp, #16]
 8001a08:	9307      	str	r3, [sp, #28]
 8001a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8001a10:	46a8      	mov	r8, r5
 8001a12:	2205      	movs	r2, #5
 8001a14:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001a18:	485e      	ldr	r0, [pc, #376]	; (8001b94 <_vfiprintf_r+0x210>)
 8001a1a:	f7fe fc01 	bl	8000220 <memchr>
 8001a1e:	9b04      	ldr	r3, [sp, #16]
 8001a20:	bb78      	cbnz	r0, 8001a82 <_vfiprintf_r+0xfe>
 8001a22:	06d9      	lsls	r1, r3, #27
 8001a24:	bf44      	itt	mi
 8001a26:	2220      	movmi	r2, #32
 8001a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a2c:	071a      	lsls	r2, r3, #28
 8001a2e:	bf44      	itt	mi
 8001a30:	222b      	movmi	r2, #43	; 0x2b
 8001a32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a36:	782a      	ldrb	r2, [r5, #0]
 8001a38:	2a2a      	cmp	r2, #42	; 0x2a
 8001a3a:	d02a      	beq.n	8001a92 <_vfiprintf_r+0x10e>
 8001a3c:	9a07      	ldr	r2, [sp, #28]
 8001a3e:	46a8      	mov	r8, r5
 8001a40:	2000      	movs	r0, #0
 8001a42:	250a      	movs	r5, #10
 8001a44:	4641      	mov	r1, r8
 8001a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a4a:	3b30      	subs	r3, #48	; 0x30
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d969      	bls.n	8001b24 <_vfiprintf_r+0x1a0>
 8001a50:	b360      	cbz	r0, 8001aac <_vfiprintf_r+0x128>
 8001a52:	e024      	b.n	8001a9e <_vfiprintf_r+0x11a>
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <_vfiprintf_r+0x214>)
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d101      	bne.n	8001a5e <_vfiprintf_r+0xda>
 8001a5a:	68b4      	ldr	r4, [r6, #8]
 8001a5c:	e7a2      	b.n	80019a4 <_vfiprintf_r+0x20>
 8001a5e:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <_vfiprintf_r+0x218>)
 8001a60:	429c      	cmp	r4, r3
 8001a62:	bf08      	it	eq
 8001a64:	68f4      	ldreq	r4, [r6, #12]
 8001a66:	e79d      	b.n	80019a4 <_vfiprintf_r+0x20>
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	f7ff fc6c 	bl	8001348 <__swsetup_r>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d09d      	beq.n	80019b0 <_vfiprintf_r+0x2c>
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	b01d      	add	sp, #116	; 0x74
 8001a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a7e:	46a8      	mov	r8, r5
 8001a80:	e7a2      	b.n	80019c8 <_vfiprintf_r+0x44>
 8001a82:	4a44      	ldr	r2, [pc, #272]	; (8001b94 <_vfiprintf_r+0x210>)
 8001a84:	1a80      	subs	r0, r0, r2
 8001a86:	fa0b f000 	lsl.w	r0, fp, r0
 8001a8a:	4318      	orrs	r0, r3
 8001a8c:	9004      	str	r0, [sp, #16]
 8001a8e:	4645      	mov	r5, r8
 8001a90:	e7be      	b.n	8001a10 <_vfiprintf_r+0x8c>
 8001a92:	9a03      	ldr	r2, [sp, #12]
 8001a94:	1d11      	adds	r1, r2, #4
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	9103      	str	r1, [sp, #12]
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	db01      	blt.n	8001aa2 <_vfiprintf_r+0x11e>
 8001a9e:	9207      	str	r2, [sp, #28]
 8001aa0:	e004      	b.n	8001aac <_vfiprintf_r+0x128>
 8001aa2:	4252      	negs	r2, r2
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	9207      	str	r2, [sp, #28]
 8001aaa:	9304      	str	r3, [sp, #16]
 8001aac:	f898 3000 	ldrb.w	r3, [r8]
 8001ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8001ab2:	d10e      	bne.n	8001ad2 <_vfiprintf_r+0x14e>
 8001ab4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aba:	d138      	bne.n	8001b2e <_vfiprintf_r+0x1aa>
 8001abc:	9b03      	ldr	r3, [sp, #12]
 8001abe:	1d1a      	adds	r2, r3, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	9203      	str	r2, [sp, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bfb8      	it	lt
 8001ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001acc:	f108 0802 	add.w	r8, r8, #2
 8001ad0:	9305      	str	r3, [sp, #20]
 8001ad2:	4d33      	ldr	r5, [pc, #204]	; (8001ba0 <_vfiprintf_r+0x21c>)
 8001ad4:	f898 1000 	ldrb.w	r1, [r8]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	4628      	mov	r0, r5
 8001adc:	f7fe fba0 	bl	8000220 <memchr>
 8001ae0:	b140      	cbz	r0, 8001af4 <_vfiprintf_r+0x170>
 8001ae2:	2340      	movs	r3, #64	; 0x40
 8001ae4:	1b40      	subs	r0, r0, r5
 8001ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8001aea:	9b04      	ldr	r3, [sp, #16]
 8001aec:	4303      	orrs	r3, r0
 8001aee:	f108 0801 	add.w	r8, r8, #1
 8001af2:	9304      	str	r3, [sp, #16]
 8001af4:	f898 1000 	ldrb.w	r1, [r8]
 8001af8:	482a      	ldr	r0, [pc, #168]	; (8001ba4 <_vfiprintf_r+0x220>)
 8001afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001afe:	2206      	movs	r2, #6
 8001b00:	f108 0701 	add.w	r7, r8, #1
 8001b04:	f7fe fb8c 	bl	8000220 <memchr>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d037      	beq.n	8001b7c <_vfiprintf_r+0x1f8>
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <_vfiprintf_r+0x224>)
 8001b0e:	bb1b      	cbnz	r3, 8001b58 <_vfiprintf_r+0x1d4>
 8001b10:	9b03      	ldr	r3, [sp, #12]
 8001b12:	3307      	adds	r3, #7
 8001b14:	f023 0307 	bic.w	r3, r3, #7
 8001b18:	3308      	adds	r3, #8
 8001b1a:	9303      	str	r3, [sp, #12]
 8001b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b1e:	444b      	add	r3, r9
 8001b20:	9309      	str	r3, [sp, #36]	; 0x24
 8001b22:	e750      	b.n	80019c6 <_vfiprintf_r+0x42>
 8001b24:	fb05 3202 	mla	r2, r5, r2, r3
 8001b28:	2001      	movs	r0, #1
 8001b2a:	4688      	mov	r8, r1
 8001b2c:	e78a      	b.n	8001a44 <_vfiprintf_r+0xc0>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f108 0801 	add.w	r8, r8, #1
 8001b34:	9305      	str	r3, [sp, #20]
 8001b36:	4619      	mov	r1, r3
 8001b38:	250a      	movs	r5, #10
 8001b3a:	4640      	mov	r0, r8
 8001b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b40:	3a30      	subs	r2, #48	; 0x30
 8001b42:	2a09      	cmp	r2, #9
 8001b44:	d903      	bls.n	8001b4e <_vfiprintf_r+0x1ca>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0c3      	beq.n	8001ad2 <_vfiprintf_r+0x14e>
 8001b4a:	9105      	str	r1, [sp, #20]
 8001b4c:	e7c1      	b.n	8001ad2 <_vfiprintf_r+0x14e>
 8001b4e:	fb05 2101 	mla	r1, r5, r1, r2
 8001b52:	2301      	movs	r3, #1
 8001b54:	4680      	mov	r8, r0
 8001b56:	e7f0      	b.n	8001b3a <_vfiprintf_r+0x1b6>
 8001b58:	ab03      	add	r3, sp, #12
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_vfiprintf_r+0x228>)
 8001b60:	a904      	add	r1, sp, #16
 8001b62:	4630      	mov	r0, r6
 8001b64:	f3af 8000 	nop.w
 8001b68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001b6c:	4681      	mov	r9, r0
 8001b6e:	d1d5      	bne.n	8001b1c <_vfiprintf_r+0x198>
 8001b70:	89a3      	ldrh	r3, [r4, #12]
 8001b72:	065b      	lsls	r3, r3, #25
 8001b74:	f53f af7e 	bmi.w	8001a74 <_vfiprintf_r+0xf0>
 8001b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b7a:	e77d      	b.n	8001a78 <_vfiprintf_r+0xf4>
 8001b7c:	ab03      	add	r3, sp, #12
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	4622      	mov	r2, r4
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <_vfiprintf_r+0x228>)
 8001b84:	a904      	add	r1, sp, #16
 8001b86:	4630      	mov	r0, r6
 8001b88:	f000 f888 	bl	8001c9c <_printf_i>
 8001b8c:	e7ec      	b.n	8001b68 <_vfiprintf_r+0x1e4>
 8001b8e:	bf00      	nop
 8001b90:	08002130 	.word	0x08002130
 8001b94:	08002170 	.word	0x08002170
 8001b98:	08002150 	.word	0x08002150
 8001b9c:	08002110 	.word	0x08002110
 8001ba0:	08002176 	.word	0x08002176
 8001ba4:	0800217a 	.word	0x0800217a
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	0800195f 	.word	0x0800195f

08001bb0 <_printf_common>:
 8001bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bb4:	4691      	mov	r9, r2
 8001bb6:	461f      	mov	r7, r3
 8001bb8:	688a      	ldr	r2, [r1, #8]
 8001bba:	690b      	ldr	r3, [r1, #16]
 8001bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bfb8      	it	lt
 8001bc4:	4613      	movlt	r3, r2
 8001bc6:	f8c9 3000 	str.w	r3, [r9]
 8001bca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bce:	4606      	mov	r6, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	b112      	cbz	r2, 8001bda <_printf_common+0x2a>
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f8c9 3000 	str.w	r3, [r9]
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	0699      	lsls	r1, r3, #26
 8001bde:	bf42      	ittt	mi
 8001be0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001be4:	3302      	addmi	r3, #2
 8001be6:	f8c9 3000 	strmi.w	r3, [r9]
 8001bea:	6825      	ldr	r5, [r4, #0]
 8001bec:	f015 0506 	ands.w	r5, r5, #6
 8001bf0:	d107      	bne.n	8001c02 <_printf_common+0x52>
 8001bf2:	f104 0a19 	add.w	sl, r4, #25
 8001bf6:	68e3      	ldr	r3, [r4, #12]
 8001bf8:	f8d9 2000 	ldr.w	r2, [r9]
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	42ab      	cmp	r3, r5
 8001c00:	dc28      	bgt.n	8001c54 <_printf_common+0xa4>
 8001c02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	3300      	adds	r3, #0
 8001c0a:	bf18      	it	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	0692      	lsls	r2, r2, #26
 8001c10:	d42d      	bmi.n	8001c6e <_printf_common+0xbe>
 8001c12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c16:	4639      	mov	r1, r7
 8001c18:	4630      	mov	r0, r6
 8001c1a:	47c0      	blx	r8
 8001c1c:	3001      	adds	r0, #1
 8001c1e:	d020      	beq.n	8001c62 <_printf_common+0xb2>
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	68e5      	ldr	r5, [r4, #12]
 8001c24:	f8d9 2000 	ldr.w	r2, [r9]
 8001c28:	f003 0306 	and.w	r3, r3, #6
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	bf08      	it	eq
 8001c30:	1aad      	subeq	r5, r5, r2
 8001c32:	68a3      	ldr	r3, [r4, #8]
 8001c34:	6922      	ldr	r2, [r4, #16]
 8001c36:	bf0c      	ite	eq
 8001c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c3c:	2500      	movne	r5, #0
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	bfc4      	itt	gt
 8001c42:	1a9b      	subgt	r3, r3, r2
 8001c44:	18ed      	addgt	r5, r5, r3
 8001c46:	f04f 0900 	mov.w	r9, #0
 8001c4a:	341a      	adds	r4, #26
 8001c4c:	454d      	cmp	r5, r9
 8001c4e:	d11a      	bne.n	8001c86 <_printf_common+0xd6>
 8001c50:	2000      	movs	r0, #0
 8001c52:	e008      	b.n	8001c66 <_printf_common+0xb6>
 8001c54:	2301      	movs	r3, #1
 8001c56:	4652      	mov	r2, sl
 8001c58:	4639      	mov	r1, r7
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	47c0      	blx	r8
 8001c5e:	3001      	adds	r0, #1
 8001c60:	d103      	bne.n	8001c6a <_printf_common+0xba>
 8001c62:	f04f 30ff 	mov.w	r0, #4294967295
 8001c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c6a:	3501      	adds	r5, #1
 8001c6c:	e7c3      	b.n	8001bf6 <_printf_common+0x46>
 8001c6e:	18e1      	adds	r1, r4, r3
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	2030      	movs	r0, #48	; 0x30
 8001c74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c78:	4422      	add	r2, r4
 8001c7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c82:	3302      	adds	r3, #2
 8001c84:	e7c5      	b.n	8001c12 <_printf_common+0x62>
 8001c86:	2301      	movs	r3, #1
 8001c88:	4622      	mov	r2, r4
 8001c8a:	4639      	mov	r1, r7
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	47c0      	blx	r8
 8001c90:	3001      	adds	r0, #1
 8001c92:	d0e6      	beq.n	8001c62 <_printf_common+0xb2>
 8001c94:	f109 0901 	add.w	r9, r9, #1
 8001c98:	e7d8      	b.n	8001c4c <_printf_common+0x9c>
	...

08001c9c <_printf_i>:
 8001c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ca0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	7e09      	ldrb	r1, [r1, #24]
 8001ca8:	b085      	sub	sp, #20
 8001caa:	296e      	cmp	r1, #110	; 0x6e
 8001cac:	4617      	mov	r7, r2
 8001cae:	4606      	mov	r6, r0
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001cb4:	f000 80b3 	beq.w	8001e1e <_printf_i+0x182>
 8001cb8:	d822      	bhi.n	8001d00 <_printf_i+0x64>
 8001cba:	2963      	cmp	r1, #99	; 0x63
 8001cbc:	d036      	beq.n	8001d2c <_printf_i+0x90>
 8001cbe:	d80a      	bhi.n	8001cd6 <_printf_i+0x3a>
 8001cc0:	2900      	cmp	r1, #0
 8001cc2:	f000 80b9 	beq.w	8001e38 <_printf_i+0x19c>
 8001cc6:	2958      	cmp	r1, #88	; 0x58
 8001cc8:	f000 8083 	beq.w	8001dd2 <_printf_i+0x136>
 8001ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001cd4:	e032      	b.n	8001d3c <_printf_i+0xa0>
 8001cd6:	2964      	cmp	r1, #100	; 0x64
 8001cd8:	d001      	beq.n	8001cde <_printf_i+0x42>
 8001cda:	2969      	cmp	r1, #105	; 0x69
 8001cdc:	d1f6      	bne.n	8001ccc <_printf_i+0x30>
 8001cde:	6820      	ldr	r0, [r4, #0]
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	0605      	lsls	r5, r0, #24
 8001ce4:	f103 0104 	add.w	r1, r3, #4
 8001ce8:	d52a      	bpl.n	8001d40 <_printf_i+0xa4>
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6011      	str	r1, [r2, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da03      	bge.n	8001cfa <_printf_i+0x5e>
 8001cf2:	222d      	movs	r2, #45	; 0x2d
 8001cf4:	425b      	negs	r3, r3
 8001cf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001cfa:	486f      	ldr	r0, [pc, #444]	; (8001eb8 <_printf_i+0x21c>)
 8001cfc:	220a      	movs	r2, #10
 8001cfe:	e039      	b.n	8001d74 <_printf_i+0xd8>
 8001d00:	2973      	cmp	r1, #115	; 0x73
 8001d02:	f000 809d 	beq.w	8001e40 <_printf_i+0x1a4>
 8001d06:	d808      	bhi.n	8001d1a <_printf_i+0x7e>
 8001d08:	296f      	cmp	r1, #111	; 0x6f
 8001d0a:	d020      	beq.n	8001d4e <_printf_i+0xb2>
 8001d0c:	2970      	cmp	r1, #112	; 0x70
 8001d0e:	d1dd      	bne.n	8001ccc <_printf_i+0x30>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	f043 0320 	orr.w	r3, r3, #32
 8001d16:	6023      	str	r3, [r4, #0]
 8001d18:	e003      	b.n	8001d22 <_printf_i+0x86>
 8001d1a:	2975      	cmp	r1, #117	; 0x75
 8001d1c:	d017      	beq.n	8001d4e <_printf_i+0xb2>
 8001d1e:	2978      	cmp	r1, #120	; 0x78
 8001d20:	d1d4      	bne.n	8001ccc <_printf_i+0x30>
 8001d22:	2378      	movs	r3, #120	; 0x78
 8001d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d28:	4864      	ldr	r0, [pc, #400]	; (8001ebc <_printf_i+0x220>)
 8001d2a:	e055      	b.n	8001dd8 <_printf_i+0x13c>
 8001d2c:	6813      	ldr	r3, [r2, #0]
 8001d2e:	1d19      	adds	r1, r3, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6011      	str	r1, [r2, #0]
 8001d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e08c      	b.n	8001e5a <_printf_i+0x1be>
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6011      	str	r1, [r2, #0]
 8001d44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d48:	bf18      	it	ne
 8001d4a:	b21b      	sxthne	r3, r3
 8001d4c:	e7cf      	b.n	8001cee <_printf_i+0x52>
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	6825      	ldr	r5, [r4, #0]
 8001d52:	1d18      	adds	r0, r3, #4
 8001d54:	6010      	str	r0, [r2, #0]
 8001d56:	0628      	lsls	r0, r5, #24
 8001d58:	d501      	bpl.n	8001d5e <_printf_i+0xc2>
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	e002      	b.n	8001d64 <_printf_i+0xc8>
 8001d5e:	0668      	lsls	r0, r5, #25
 8001d60:	d5fb      	bpl.n	8001d5a <_printf_i+0xbe>
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	4854      	ldr	r0, [pc, #336]	; (8001eb8 <_printf_i+0x21c>)
 8001d66:	296f      	cmp	r1, #111	; 0x6f
 8001d68:	bf14      	ite	ne
 8001d6a:	220a      	movne	r2, #10
 8001d6c:	2208      	moveq	r2, #8
 8001d6e:	2100      	movs	r1, #0
 8001d70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d74:	6865      	ldr	r5, [r4, #4]
 8001d76:	60a5      	str	r5, [r4, #8]
 8001d78:	2d00      	cmp	r5, #0
 8001d7a:	f2c0 8095 	blt.w	8001ea8 <_printf_i+0x20c>
 8001d7e:	6821      	ldr	r1, [r4, #0]
 8001d80:	f021 0104 	bic.w	r1, r1, #4
 8001d84:	6021      	str	r1, [r4, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d13d      	bne.n	8001e06 <_printf_i+0x16a>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	f040 808e 	bne.w	8001eac <_printf_i+0x210>
 8001d90:	4665      	mov	r5, ip
 8001d92:	2a08      	cmp	r2, #8
 8001d94:	d10b      	bne.n	8001dae <_printf_i+0x112>
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	07db      	lsls	r3, r3, #31
 8001d9a:	d508      	bpl.n	8001dae <_printf_i+0x112>
 8001d9c:	6923      	ldr	r3, [r4, #16]
 8001d9e:	6862      	ldr	r2, [r4, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	bfde      	ittt	le
 8001da4:	2330      	movle	r3, #48	; 0x30
 8001da6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001daa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dae:	ebac 0305 	sub.w	r3, ip, r5
 8001db2:	6123      	str	r3, [r4, #16]
 8001db4:	f8cd 8000 	str.w	r8, [sp]
 8001db8:	463b      	mov	r3, r7
 8001dba:	aa03      	add	r2, sp, #12
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff fef6 	bl	8001bb0 <_printf_common>
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	d14d      	bne.n	8001e64 <_printf_i+0x1c8>
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	b005      	add	sp, #20
 8001dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dd2:	4839      	ldr	r0, [pc, #228]	; (8001eb8 <_printf_i+0x21c>)
 8001dd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	6821      	ldr	r1, [r4, #0]
 8001ddc:	1d1d      	adds	r5, r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6015      	str	r5, [r2, #0]
 8001de2:	060a      	lsls	r2, r1, #24
 8001de4:	d50b      	bpl.n	8001dfe <_printf_i+0x162>
 8001de6:	07ca      	lsls	r2, r1, #31
 8001de8:	bf44      	itt	mi
 8001dea:	f041 0120 	orrmi.w	r1, r1, #32
 8001dee:	6021      	strmi	r1, [r4, #0]
 8001df0:	b91b      	cbnz	r3, 8001dfa <_printf_i+0x15e>
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	f022 0220 	bic.w	r2, r2, #32
 8001df8:	6022      	str	r2, [r4, #0]
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	e7b7      	b.n	8001d6e <_printf_i+0xd2>
 8001dfe:	064d      	lsls	r5, r1, #25
 8001e00:	bf48      	it	mi
 8001e02:	b29b      	uxthmi	r3, r3
 8001e04:	e7ef      	b.n	8001de6 <_printf_i+0x14a>
 8001e06:	4665      	mov	r5, ip
 8001e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e0c:	fb02 3311 	mls	r3, r2, r1, r3
 8001e10:	5cc3      	ldrb	r3, [r0, r3]
 8001e12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001e16:	460b      	mov	r3, r1
 8001e18:	2900      	cmp	r1, #0
 8001e1a:	d1f5      	bne.n	8001e08 <_printf_i+0x16c>
 8001e1c:	e7b9      	b.n	8001d92 <_printf_i+0xf6>
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	6825      	ldr	r5, [r4, #0]
 8001e22:	6961      	ldr	r1, [r4, #20]
 8001e24:	1d18      	adds	r0, r3, #4
 8001e26:	6010      	str	r0, [r2, #0]
 8001e28:	0628      	lsls	r0, r5, #24
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	d501      	bpl.n	8001e32 <_printf_i+0x196>
 8001e2e:	6019      	str	r1, [r3, #0]
 8001e30:	e002      	b.n	8001e38 <_printf_i+0x19c>
 8001e32:	066a      	lsls	r2, r5, #25
 8001e34:	d5fb      	bpl.n	8001e2e <_printf_i+0x192>
 8001e36:	8019      	strh	r1, [r3, #0]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6123      	str	r3, [r4, #16]
 8001e3c:	4665      	mov	r5, ip
 8001e3e:	e7b9      	b.n	8001db4 <_printf_i+0x118>
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	1d19      	adds	r1, r3, #4
 8001e44:	6011      	str	r1, [r2, #0]
 8001e46:	681d      	ldr	r5, [r3, #0]
 8001e48:	6862      	ldr	r2, [r4, #4]
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	f7fe f9e7 	bl	8000220 <memchr>
 8001e52:	b108      	cbz	r0, 8001e58 <_printf_i+0x1bc>
 8001e54:	1b40      	subs	r0, r0, r5
 8001e56:	6060      	str	r0, [r4, #4]
 8001e58:	6863      	ldr	r3, [r4, #4]
 8001e5a:	6123      	str	r3, [r4, #16]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e62:	e7a7      	b.n	8001db4 <_printf_i+0x118>
 8001e64:	6923      	ldr	r3, [r4, #16]
 8001e66:	462a      	mov	r2, r5
 8001e68:	4639      	mov	r1, r7
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	47c0      	blx	r8
 8001e6e:	3001      	adds	r0, #1
 8001e70:	d0aa      	beq.n	8001dc8 <_printf_i+0x12c>
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	079b      	lsls	r3, r3, #30
 8001e76:	d413      	bmi.n	8001ea0 <_printf_i+0x204>
 8001e78:	68e0      	ldr	r0, [r4, #12]
 8001e7a:	9b03      	ldr	r3, [sp, #12]
 8001e7c:	4298      	cmp	r0, r3
 8001e7e:	bfb8      	it	lt
 8001e80:	4618      	movlt	r0, r3
 8001e82:	e7a3      	b.n	8001dcc <_printf_i+0x130>
 8001e84:	2301      	movs	r3, #1
 8001e86:	464a      	mov	r2, r9
 8001e88:	4639      	mov	r1, r7
 8001e8a:	4630      	mov	r0, r6
 8001e8c:	47c0      	blx	r8
 8001e8e:	3001      	adds	r0, #1
 8001e90:	d09a      	beq.n	8001dc8 <_printf_i+0x12c>
 8001e92:	3501      	adds	r5, #1
 8001e94:	68e3      	ldr	r3, [r4, #12]
 8001e96:	9a03      	ldr	r2, [sp, #12]
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	42ab      	cmp	r3, r5
 8001e9c:	dcf2      	bgt.n	8001e84 <_printf_i+0x1e8>
 8001e9e:	e7eb      	b.n	8001e78 <_printf_i+0x1dc>
 8001ea0:	2500      	movs	r5, #0
 8001ea2:	f104 0919 	add.w	r9, r4, #25
 8001ea6:	e7f5      	b.n	8001e94 <_printf_i+0x1f8>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ac      	bne.n	8001e06 <_printf_i+0x16a>
 8001eac:	7803      	ldrb	r3, [r0, #0]
 8001eae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eb6:	e76c      	b.n	8001d92 <_printf_i+0xf6>
 8001eb8:	08002181 	.word	0x08002181
 8001ebc:	08002192 	.word	0x08002192

08001ec0 <_sbrk_r>:
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4c06      	ldr	r4, [pc, #24]	; (8001edc <_sbrk_r+0x1c>)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	4608      	mov	r0, r1
 8001eca:	6023      	str	r3, [r4, #0]
 8001ecc:	f7fe fcf0 	bl	80008b0 <_sbrk>
 8001ed0:	1c43      	adds	r3, r0, #1
 8001ed2:	d102      	bne.n	8001eda <_sbrk_r+0x1a>
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	b103      	cbz	r3, 8001eda <_sbrk_r+0x1a>
 8001ed8:	602b      	str	r3, [r5, #0]
 8001eda:	bd38      	pop	{r3, r4, r5, pc}
 8001edc:	2000008c 	.word	0x2000008c

08001ee0 <__sread>:
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee8:	f000 f896 	bl	8002018 <_read_r>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	bfab      	itete	ge
 8001ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ef4:	181b      	addge	r3, r3, r0
 8001ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001efa:	bfac      	ite	ge
 8001efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001efe:	81a3      	strhlt	r3, [r4, #12]
 8001f00:	bd10      	pop	{r4, pc}

08001f02 <__swrite>:
 8001f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f06:	461f      	mov	r7, r3
 8001f08:	898b      	ldrh	r3, [r1, #12]
 8001f0a:	05db      	lsls	r3, r3, #23
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	460c      	mov	r4, r1
 8001f10:	4616      	mov	r6, r2
 8001f12:	d505      	bpl.n	8001f20 <__swrite+0x1e>
 8001f14:	2302      	movs	r3, #2
 8001f16:	2200      	movs	r2, #0
 8001f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f1c:	f000 f868 	bl	8001ff0 <_lseek_r>
 8001f20:	89a3      	ldrh	r3, [r4, #12]
 8001f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2a:	81a3      	strh	r3, [r4, #12]
 8001f2c:	4632      	mov	r2, r6
 8001f2e:	463b      	mov	r3, r7
 8001f30:	4628      	mov	r0, r5
 8001f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f36:	f000 b817 	b.w	8001f68 <_write_r>

08001f3a <__sseek>:
 8001f3a:	b510      	push	{r4, lr}
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f42:	f000 f855 	bl	8001ff0 <_lseek_r>
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	89a3      	ldrh	r3, [r4, #12]
 8001f4a:	bf15      	itete	ne
 8001f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f56:	81a3      	strheq	r3, [r4, #12]
 8001f58:	bf18      	it	ne
 8001f5a:	81a3      	strhne	r3, [r4, #12]
 8001f5c:	bd10      	pop	{r4, pc}

08001f5e <__sclose>:
 8001f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f62:	f000 b813 	b.w	8001f8c <_close_r>
	...

08001f68 <_write_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4c07      	ldr	r4, [pc, #28]	; (8001f88 <_write_r+0x20>)
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	4608      	mov	r0, r1
 8001f70:	4611      	mov	r1, r2
 8001f72:	2200      	movs	r2, #0
 8001f74:	6022      	str	r2, [r4, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7fe fc49 	bl	800080e <_write>
 8001f7c:	1c43      	adds	r3, r0, #1
 8001f7e:	d102      	bne.n	8001f86 <_write_r+0x1e>
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	b103      	cbz	r3, 8001f86 <_write_r+0x1e>
 8001f84:	602b      	str	r3, [r5, #0]
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
 8001f88:	2000008c 	.word	0x2000008c

08001f8c <_close_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4c06      	ldr	r4, [pc, #24]	; (8001fa8 <_close_r+0x1c>)
 8001f90:	2300      	movs	r3, #0
 8001f92:	4605      	mov	r5, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	6023      	str	r3, [r4, #0]
 8001f98:	f7fe fc55 	bl	8000846 <_close>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d102      	bne.n	8001fa6 <_close_r+0x1a>
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	b103      	cbz	r3, 8001fa6 <_close_r+0x1a>
 8001fa4:	602b      	str	r3, [r5, #0]
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	2000008c 	.word	0x2000008c

08001fac <_fstat_r>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	4c07      	ldr	r4, [pc, #28]	; (8001fcc <_fstat_r+0x20>)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	f7fe fc50 	bl	800085e <_fstat>
 8001fbe:	1c43      	adds	r3, r0, #1
 8001fc0:	d102      	bne.n	8001fc8 <_fstat_r+0x1c>
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	b103      	cbz	r3, 8001fc8 <_fstat_r+0x1c>
 8001fc6:	602b      	str	r3, [r5, #0]
 8001fc8:	bd38      	pop	{r3, r4, r5, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000008c 	.word	0x2000008c

08001fd0 <_isatty_r>:
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4c06      	ldr	r4, [pc, #24]	; (8001fec <_isatty_r+0x1c>)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	4605      	mov	r5, r0
 8001fd8:	4608      	mov	r0, r1
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	f7fe fc4f 	bl	800087e <_isatty>
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	d102      	bne.n	8001fea <_isatty_r+0x1a>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	b103      	cbz	r3, 8001fea <_isatty_r+0x1a>
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	bd38      	pop	{r3, r4, r5, pc}
 8001fec:	2000008c 	.word	0x2000008c

08001ff0 <_lseek_r>:
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	4c07      	ldr	r4, [pc, #28]	; (8002010 <_lseek_r+0x20>)
 8001ff4:	4605      	mov	r5, r0
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	6022      	str	r2, [r4, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f7fe fc48 	bl	8000894 <_lseek>
 8002004:	1c43      	adds	r3, r0, #1
 8002006:	d102      	bne.n	800200e <_lseek_r+0x1e>
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	b103      	cbz	r3, 800200e <_lseek_r+0x1e>
 800200c:	602b      	str	r3, [r5, #0]
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	2000008c 	.word	0x2000008c

08002014 <__malloc_lock>:
 8002014:	4770      	bx	lr

08002016 <__malloc_unlock>:
 8002016:	4770      	bx	lr

08002018 <_read_r>:
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4c07      	ldr	r4, [pc, #28]	; (8002038 <_read_r+0x20>)
 800201c:	4605      	mov	r5, r0
 800201e:	4608      	mov	r0, r1
 8002020:	4611      	mov	r1, r2
 8002022:	2200      	movs	r2, #0
 8002024:	6022      	str	r2, [r4, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f7fe fbd4 	bl	80007d4 <_read>
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d102      	bne.n	8002036 <_read_r+0x1e>
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	b103      	cbz	r3, 8002036 <_read_r+0x1e>
 8002034:	602b      	str	r3, [r5, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	2000008c 	.word	0x2000008c

0800203c <_init>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	bf00      	nop
 8002040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002042:	bc08      	pop	{r3}
 8002044:	469e      	mov	lr, r3
 8002046:	4770      	bx	lr

08002048 <_fini>:
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	bf00      	nop
 800204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204e:	bc08      	pop	{r3}
 8002050:	469e      	mov	lr, r3
 8002052:	4770      	bx	lr
